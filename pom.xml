<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!--
		DMS consists of two major parts: DMS itself and the third party software needed to
		run it. While DMS itself is 100% pure Java, some of the third party software are
		not. This means building a platform specific distribution boils down to first
		building the dms.jar and then assembling all application resources.

		Note that Maven 3 does not automatically install all dependencies, unlike Maven 2.
		To install external dependencies to your local repository, run the following commands:

			mvn external:install
		or
			mvn dependency:go-offline

		To build DMS, do:

			mvn clean

		After building, the "target" directory will contain the binary.
		To generate a full source code report, run:

			mvn site

		After generating, the "target/site" directory will contain the reports.
	-->

	<modelVersion>4.0.0</modelVersion>
	<groupId>org.digitalmediaserver</groupId>
	<artifactId>dms</artifactId>
	<name>Digital Media Server</name>
	<packaging>jar</packaging>
	<version>0.0.2-SNAPSHOT</version>
	<url>http://www.digitalmediaserver.org/</url>
	<inceptionYear>2016</inceptionYear>
	<organization>
		<name>Digital Media Server</name>
		<url>http://www.digitalmediaserver.org/</url>
	</organization>
	<licenses>
		<license>
			<name>GNU General Public License version 2</name>
			<url>http://www.gnu.org/licenses/gpl-2.0.txt</url>
			<distribution>manual</distribution>
		</license>
	</licenses>
	<description>
		Digital Media Server is a DLNA compatible UPnP AV Media Server. It is
		capable of sharing digital video, audio and image resources to UPnP AV
		and DLNA capable devices. It is based on PS3 Media Server by shagrath
		and Universal Media Server.

		Digital Media Server supports Windows, Linux and OS X. The program
		streams or transcodes many different media formats with little or no
		configuration. It is powered by MEncoder, FFmpeg, tsMuxeR, AviSynth,
		MediaInfo, VLC, OpenSubtitles.org and more, which combine to offer
		support for a wide range of media formats.	
	</description>
	<scm>
		<connection>scm:git:git://github.com/DigitalMediaServer/DigitalMediaServer.git</connection>
		<developerConnection>scm:git:git@github.com:DigitalMediaServer/DigitalMediaServer.git</developerConnection>
		<tag>master</tag>
		<url>https://github.com/DigitalMediaServer/DigitalMediaServer</url>
	</scm>
	<issueManagement>
		<system>GitHub</system>
		<url>https://github.com/DigitalMediaServer/DigitalMediaServer/issues</url>
	</issueManagement>
	<properties>
		<project.mainclass>net.pms.PMS</project.mainclass>
		<project.name.short>DMS</project.name.short>
		<project.name.camel>DigitalMediaServer</project.name.camel>
		<project.skelprofile.dir>/etc/skel/.config/</project.skelprofile.dir>
		<cuelib-version>1.2.1-2008-06-13</cuelib-version>

		<!-- In versions after 1.6.0, they removed code that the MovieInfo plugin relies on -->
		<jgoodies-forms-version>1.9.0</jgoodies-forms-version>

		<!-- Version 2.7.0 is the last free version. The latest libraries are shipped only with the commercial JGoodies Smart Client -->
		<jgoodies-looks-version>2.7.0</jgoodies-looks-version>

		<!-- Skip 4.65-1.05-RC because it doesn't work, author is working on fixing it -->
		<sevenzip-version>4.65-1.04-RC</sevenzip-version>

		<twelvemonkeys-imageio-version>3.3.2</twelvemonkeys-imageio-version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.external-resources>${project.basedir}/src/main/external-resources</project.external-resources>
		<project.binaries>${project.basedir}/bin</project.binaries>

		<project.binaries-base>http://universalmediaserver.com/svn/binaries</project.binaries-base>
		<binary-revision>71</binary-revision>

		<maven-javadoc-plugin-version>3.0.0</maven-javadoc-plugin-version>
		<git-commit-id-plugin-version>2.2.4</git-commit-id-plugin-version>
		<maven-assembly-plugin-version>3.1.0</maven-assembly-plugin-version>
		<maven-resources-plugin-version>3.0.2</maven-resources-plugin-version>
		<maven-enforcer-plugin-version>3.0.0-M1</maven-enforcer-plugin-version>
		<appbundle-maven-plugin-version>1.2.0</appbundle-maven-plugin-version>
		<maven-clean-plugin-version>3.1.0</maven-clean-plugin-version>
		<maven-shade-plugin-version>3.1.1</maven-shade-plugin-version>

		<!--
			org.slf4j:slf4j-api is shared with
				- su.litvak.chromecast:api-v2
				- fm.last:coverartarchive-api
				- com.github.oshi:oshi-core
				- com.rometools:rome

			Check the org.slf4j:slf4j-api version of the other libraries before upgrading
		-->
		<logback-version>1.2.3</logback-version>
		<surefire-version>2.20</surefire-version>

		<!--
			net.java.dev.jna:jna-platform is shared with
				- com.github.oshi:oshi-core

			Check the net.java.dev.jna:jna-platform version of the other library before upgrading
		-->
		<jna-version>4.4.0</jna-version>

		<!-- Use our MakeNSIS version for Windows builds -->
		<makensis-bin>${project.external-resources}/third-party/nsis/makensis.exe</makensis-bin>
		<release>false</release> <!-- mvn -Drelease -->
	</properties>

	<!-- 1.2.1-SNAPSHOT
		https://jwebswing.com/artifactory/libs-release/public/sh/tak/appbundler/appbundle-maven-plugin
	-->

	<repositories>
		<repository>
			<id>central</id>
			<name>Maven Plugin Repository</name>
			<url>https://repo1.maven.org/maven2</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>daily</updatePolicy>
				<checksumPolicy>warn</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>4thline-repo</id>
			<name>Repository used for Cling</name>
			<url>http://4thline.org/m2</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
				<checksumPolicy>warn</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>jaudiotagger-repository</id>
			<url>https://dl.bintray.com/pathrik/PathriK</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
				<checksumPolicy>fail</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<!-- This can be removed when MEncoder is removed -->
			<groupId>org.beanshell</groupId>
			<artifactId>bsh-core</artifactId>
			<version>2.0b4</version>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.2</version>
		</dependency>
		<dependency>
			<groupId>commons-configuration</groupId>
			<artifactId>commons-configuration</artifactId>
			<!--
				commons-logging:commons-logging is shared with
					- com.github.junrar:junrar
					- fm.last:coverartarchive-api

				Check the commons-logging:commons-logging version of the other libraries before upgrading
			-->
			<version>1.10</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<!--
				commons-io:commons-io is shared with
					- fm.last:coverartarchive-api

				Check the commons-io:commons-io version of the library before upgrading
			-->
			<version>2.6</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.7</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.196</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback-version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback-version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.2</version>
		</dependency>
		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty</artifactId> <!-- Use 'netty-all' for 4.0 or above -->
			<version>3.10.6.Final</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.rometools</groupId>
			<artifactId>rome</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- su.litvak.chromecast
					- fm.last:coverartarchive-api
					- com.github.oshi:oshi-core

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading
			-->
			<version>1.9.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>net.coobird</groupId>
			<artifactId>thumbnailator</artifactId>
			<version>[0.4, 0.5)</version>
		</dependency>

		<!--
			If any ImageIO plugins are added or removed, corresponding changes
		 	must be made in src/main/external-resources/META-INF/services
		 -->
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-bmp</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-core</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-icns</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-iff</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-jpeg</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-hdr</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-metadata</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pcx</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pict</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pnm</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-psd</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-sgi</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-tga</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-tiff</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.drewnoakes</groupId>
			<artifactId>metadata-extractor</artifactId>
			<version>2.10.1</version>
		</dependency>
		<dependency>
			<groupId>net.jthink</groupId>
			<artifactId>jaudiotagger</artifactId>
			<version>2.2.6-PATHRIK</version>
		</dependency>
		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-forms</artifactId>
			<version>${jgoodies-forms-version}</version>
		</dependency>
		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-looks</artifactId>
			<version>${jgoodies-looks-version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.junrar</groupId>
			<artifactId>junrar</artifactId>
			<!--
				commons-logging:commons-logging is shared with
					- commons-configuration:commons-configuration
					- fm.last:coverartarchive-api

				Check the commons-logging:commons-logging version of the other libraries before upgrading
			-->
			<version>1.0.0</version>
		</dependency>

		<!-- XXX: not Mavenized: https://code.google.com/p/cuelib/ -->
		<dependency>
			<groupId>jwbroek.cuelib</groupId>
			<artifactId>cuelib</artifactId>
			<version>${cuelib-version}</version>
		</dependency>

		<dependency>
			<groupId>xmlwise</groupId>
			<artifactId>xmlwise</artifactId>
			<version>1.2.11</version>
		</dependency>
		<dependency>
			<groupId>sevenzip</groupId>
			<artifactId>jbinding</artifactId>
			<version>${sevenzip-version}</version>
		</dependency>
		<dependency>
			<groupId>sevenzip-allplatforms</groupId>
			<artifactId>jbinding-allplatforms</artifactId>
			<version>${sevenzip-version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.easytesting</groupId>
			<artifactId>fest-util</artifactId>
			<version>1.2.5</version>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<!-- Use 3.x for Java 8 -->
			<version>2.8.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
			<version>${jna-version}</version>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna-platform</artifactId>
			<version>${jna-version}</version>
		</dependency>
		<dependency>
			<groupId>org.fourthline.cling</groupId>
			<artifactId>cling-core</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.fourthline.cling</groupId>
			<artifactId>cling-support</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.seamless</groupId>
			<artifactId>seamless-http</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.seamless</groupId>
			<artifactId>seamless-util</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.seamless</groupId>
			<artifactId>seamless-xml</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.25</version>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.6</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.2.1</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>3.0.1</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>
		<dependency>
			<groupId>javax.jmdns</groupId>
			<artifactId>jmdns</artifactId>
			<version>3.4.1</version>
		</dependency>
		<dependency>
			<groupId>org.jdom</groupId>
			<artifactId>jdom2</artifactId>
			<version>2.0.6</version>
		</dependency>
		<dependency>
			<groupId>com.samskivert</groupId>
			<artifactId>jmustache</artifactId>
			<version>1.13</version>
		</dependency>
		<dependency>
			<groupId>su.litvak.chromecast</groupId>
			<artifactId>api-v2</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- fm.last:coverartarchive-api
					- com.github.oshi:oshi-core
					- com.rometools:rome

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading
			-->
			<version>0.10.1</version>
		</dependency>
		<dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>icu4j</artifactId>
			<version>59.1</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>annotations</artifactId>
			<version>3.0.1u2</version>
		</dependency>
		<dependency>
			<groupId>fm.last</groupId>
			<artifactId>coverartarchive-api</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- su.litvak.chromecast
					- com.github.oshi:oshi-core
					- com.rometools:rome

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading

				commons-logging:commons-logging is shared with
					- commons-configuration:commons-configuration
					- com.github.junrar:junrar

				Check the commons-logging:commons-logging version of the other libraries before upgrading

				commons-io:commons-io is shared with
					- net.pms:dms

				Check the commons-io:commons-io version before upgrading
			-->
			<version>2.1.0</version>
			<exclusions>
				<!-- This should never have been a dependency in the first place -->
				<exclusion>
					<groupId>com.google.code.findbugs</groupId>
					<artifactId>jsr305</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-io</groupId>
					<artifactId>commons-io</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.github.oshi</groupId>
			<artifactId>oshi-core</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- su.litvak.chromecast
					- fm.last:coverartarchive-api
					- com.rometools:rome

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading

				net.java.dev.jna:jna-platform is shared with
					- net.pms:dms

				Check the net.java.dev.jna:jna-platform version before upgrading
			-->
			<version>3.4.3</version>
		</dependency>
		<!--
		<dependency>
			<groupId>net.sourceforge.cobertura</groupId>
			<artifactId>cobertura</artifactId>
			<version>2.1.2</version>
			<scope>test</scope>
		</dependency>
		-->
	</dependencies>

	<build>
		<defaultGoal>pre-integration-test</defaultGoal>

		<!-- specify how files in src/main/resources are bundled in the target jar -->
		<resources>
			<!-- 1) package unfiltered resources -->

			<!--
				This needs to be defined explicitly if a <resources>...</resources>
				section is used
			-->
			<resource>
				<directory>src/main/resources</directory>
				<!--
					By default, Maven packages resources in the top-level of the jar e.g.

						/example.res

					The old DMS ant build packaged them in a "resources" directory
					e.g:

						/resources/example.res

					Currently, we preserve the old destination. If this is ever changed
					to the Maven default, a handful of files will need to be changed to
					reference "/example.res" rather than "/resources/example.res"
				-->
				<targetPath>resources</targetPath>
				<excludes>
					<exclude>project.properties</exclude>
				</excludes>

				<!-- Avoid inadvertently filtering binaries -->
				<filtering>false</filtering>
			</resource>

			<!-- 2) package filtered resources -->
			<resource>
				<directory>src/main/resources</directory>
				<targetPath>resources</targetPath>
				<includes>
					<include>project.properties</include>
				</includes>

				<!-- Filter to replace Maven properties -->
				<filtering>true</filtering>
			</resource>

			<!-- 3) package filtered NSIS header files -->
			<resource>
				<directory>src/main/external-resources/nsis</directory>
				<includes>
					<include>extra.nsh</include>
				</includes>

				<!-- Filter to replace Maven properties -->
				<filtering>true</filtering>
				<targetPath>..</targetPath>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<includes>
					<include>project.properties</include>
				</includes>
				<targetPath>resources</targetPath>

				<!-- Enable the use of Maven properties -->
				<filtering>true</filtering>
			</testResource>
			<!--*.srt files to test charset detection-->
			<testResource>
				<directory>src/test/resources/net/pms/util</directory>
				<includes>
					<include>*.srt</include>
				</includes>
				<targetPath>net/pms/util</targetPath>
			</testResource>
		</testResources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>${maven-enforcer-plugin-version}</version>
					<executions>
						<execution>
							<id>enforce-Maven-minimum-version</id>
							<goals>
								<goal>enforce</goal>
							</goals>
							<configuration>
								<rules>
									<requireMavenVersion>
										<version>[3.3.3,)</version> <!-- 3.2.0 should be suffisant for build only -->
									</requireMavenVersion>
								</rules>
								<rules>
									<requireJavaVersion>
										<version>[1.7,)</version>
									</requireJavaVersion>
								</rules>
								<fail>true</fail>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${surefire-version}</version>
					<configuration>
						<!--
							1) Force language because JUnit tests depend on English language strings

							2) Use our JNA dependency rather than the system's to avoid
							incompatible JNA native library that could be installed on this system (like JNA 3.2.7)
						-->
						<shutdown>kill</shutdown>
						<forkCount>1.5C</forkCount>
						<reuseForks>true</reuseForks>
						<!--
							Only one argLine element is processed.
							-XX:-UseSplitVerifier is a workaround for use Cobertura with Java 7
						-->
						<argLine>-Duser.language=en -Djna.nosys=true -XX:-UseSplitVerifier</argLine>
					</configuration>
				</plugin>

				<!--
					This plugin's configuration is used to run Crowdin plugin from the command line,
					it has no influence on the Maven build itself.
				-->
				<plugin>
					<groupId>org.digitalmediaserver</groupId>
					<artifactId>crowdin-maven-plugin</artifactId>
					<version>0.4.1</version>
					<configuration>
						<project>${project}</project>
						<languageFilesFolder>${project.basedir}/src/main/resources/i18n</languageFilesFolder>
						<downloadFolder>${project.basedir}/extras/crowdin</downloadFolder>
						<statusFile>${project.basedir}/src/main/resources/languages.properties</statusFile>
						<crowdinServerId>crowdin-dms</crowdinServerId>
						<pushFileName>messages.properties</pushFileName>
						<pushFileTitle>Digital Media Server</pushFileTitle>
						<projectName>Digital Media Server</projectName>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.8</version>
					<dependencies>
						<dependency>
							<groupId>ant-contrib</groupId>
							<artifactId>ant-contrib</artifactId>
							<version>1.0b3</version>
							<exclusions>
								<exclusion>
									<groupId>ant</groupId>
									<artifactId>ant</artifactId>
								</exclusion>
							</exclusions>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.7.1</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>${maven-enforcer-plugin-version}</version>
			</plugin>
			<!--
				Plugin to add git commit information properties.
				These are used in the project.properties files.
				See: https://github.com/ktoso/maven-git-commit-id-plugin
			-->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>${git-commit-id-plugin-version}</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dateFormat>yyyy-MM-dd</dateFormat>
					<verbose>false</verbose>
					<generateGitPropertiesFile>false</generateGitPropertiesFile>
					<failOnNoGitDirectory>false</failOnNoGitDirectory>
					<failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin-version}</version>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<testSource>1.7</testSource>
					<testTarget>1.7</testTarget>
					<compilerArgument>${compilerArgument}</compilerArgument>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.10</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
					<wtpversion>1.5</wtpversion>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-idea-plugin</artifactId>
				<version>2.2.1</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
					<dependenciesAsLibraries>true</dependenciesAsLibraries>
					<useFullNames>false</useFullNames>
				</configuration>
			</plugin>

			<!--
				This plugin will take care of installing the external dependencies that do not
				exist in a public Maven repository. That is why we store some jar files in the
				"src/main/external-resources/lib" directory and have this plugin take care of
				the installation at build time.

				Checksums can be calculated with "openssl sha1 [filename]".
			-->
			<plugin>
				<groupId>com.universalmediaserver</groupId>
				<artifactId>external-maven-plugin</artifactId>
				<version>0.2</version>
				<inherited>false</inherited>
				<configuration>
					<disableSSLValidation>true</disableSSLValidation>
					<stagingDirectory>${project.build.directory}/dependencies/</stagingDirectory>
					<createChecksum>true</createChecksum>
					<artifactItems>
						<artifactItem>
							<groupId>sevenzip</groupId>
							<artifactId>jbinding</artifactId>
							<version>${sevenzip-version}</version>
							<downloadUrl>http://www.spirton.com/uploads/7-Zip-JBinding/7-Zip-JBinding-{version}.{packaging}</downloadUrl>
						</artifactItem>
						<artifactItem>
							<groupId>sevenzip-allplatforms</groupId>
							<artifactId>jbinding-allplatforms</artifactId>
							<version>${sevenzip-version}</version>
							<downloadUrl>http://www.spirton.com/uploads/7-Zip-JBinding/7-Zip-JBinding-AllPlatforms-{version}.{packaging}</downloadUrl>
						</artifactItem>
						<artifactItem>
							<groupId>jwbroek.cuelib</groupId>
							<artifactId>cuelib</artifactId>
							<version>${cuelib-version}</version>
							<downloadUrl>http://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/cuelib/cuelib-${cuelib-version}.jar</downloadUrl>
-							<checksum>d03b6b960b3b83a2a419e8b5f07b6ba4bd18387b</checksum>
						</artifactItem>
					</artifactItems>
				</configuration>
				<executions>
					<execution>
						<id>clean-external-dependencies</id>
						<phase>clean</phase>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Generate the shaded JAR used by the profiles -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>${maven-shade-plugin-version}</version>
				<configuration>
					<minimizeJar>true</minimizeJar>
					<keepDependenciesWithProvidedScope>false</keepDependenciesWithProvidedScope>
					<outputFile>${project.build.directory}/${project.artifactId}.jar</outputFile>
					<!-- non-included will be automatically excluded -->
					<filters>
						<filter>
							<artifact>commons-logging:commons-logging</artifact>
							<includes>
								<include>**</include>
							</includes>
						</filter>
						<filter>
							<artifact>com.twelvemonkeys.imageio:*</artifact>
							<includes>
								<include>**</include>
							</includes>
						</filter>
						<filter>
							<artifact>com.twelvemonkeys.common:common-lang</artifact>
							<includes>
								<include>**</include>
							</includes>
						</filter>
						<filter>
							<artifact>com.jgoodies:jgoodies-looks</artifact>
							<includes>
								<include>**</include>
							</includes>
						</filter>
						<filter>
							<artifact>org.fourthline.cling:cling-core</artifact>
							<includes>
								<include>**</include>
							</includes>
						</filter>
					</filters>
					<promoteTransitiveDependencies>true</promoteTransitiveDependencies>
					<artifactSet>
						<excludes>
							<exclude>com.google.code.findbugs:annotations</exclude>
						</excludes>
					</artifactSet>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>${project.mainclass}</mainClass>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<!-- Set reports for the maven site plugin -->
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.9</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>index</report>
							<report>dependencies</report>
							<report>dependency-convergence</report>
							<report>dependency-management</report>
							<report>plugins</report>
						</reports>
					</reportSet>
		        </reportSets>
			</plugin>

			<!-- DMS tests report -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${surefire-version}</version>
				<configuration>
					<linkXRef>false</linkXRef>
					<showSuccess>false</showSuccess>
				</configuration>
			</plugin>

			<!-- Javadoc -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${maven-javadoc-plugin-version}</version>
				<configuration>
					<quiet>true</quiet>
					<tags>
						<tag>
							<name>todo</name>
							<placement>a</placement>
							<head>To Do:</head>
						</tag>
						<tag>
							<name>review</name>
							<placement>a</placement>
							<head>Review:</head>
						</tag>
					</tags>
					<!--
						Doclet to generate class diagrams inside Javadoc.
						Requires the installation of Graphviz (http://www.graphviz.org/)
					-->
					<doclet>org.jboss.apiviz.APIviz</doclet>
					<docletArtifact>
						<groupId>org.jboss.apiviz</groupId>
						<artifactId>apiviz</artifactId>
						<version>1.3.2.GA</version>
					</docletArtifact>
					<useStandardDocletOptions>true</useStandardDocletOptions>
				</configuration>
			</plugin>

			<!-- AppBundler report -->
			<plugin>
					<groupId>sh.tak.appbundler</groupId>
					<artifactId>appbundle-maven-plugin</artifactId>
					<version>${appbundle-maven-plugin-version}</version>
			</plugin>

			<!-- Class dependency report -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
				<version>2.0</version>
			</plugin>

			<!-- Findbugs report -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>3.0.5</version>
				<configuration>
					<timeout>1200000</timeout>
					<failOnError>false</failOnError>
					<!--
					<effort>Max</effort>
					<threshold>Low</threshold>
					-->
					<xmlOutput>true</xmlOutput>
				</configuration>
			</plugin>

			<!-- Checkstyle report -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<configLocation>CheckStyle.xml</configLocation>
					<linkXRef>false</linkXRef>
				</configuration>
			</plugin>

			<!-- Cobertura Test Coverage report -->
			<plugin>
				<groupId>com.qualinsight.mojo.cobertura</groupId>
				<artifactId>qualinsight-mojo-cobertura-core</artifactId>
				<version>2.0.0</version>
				<configuration>
					<formats>html</formats>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.9.0</version>
				<configuration>
					<analysisCache>true</analysisCache>
					<linkXRef>false</linkXRef>
					<sourceEncoding>utf-8</sourceEncoding>
					<targetJdk>1.7</targetJdk>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.github.jrh3k5</groupId>
				<artifactId>l10n-maven-plugin</artifactId>
				<version>1.4</version>
				<configuration>
					<failBuild>true</failBuild>
					<messagesFile>${project.basedir}/src/main/resources/i18n/messages.properties</messagesFile>
					<translatedMessagesPattern>src/main/resources/i18n/messages*.properties</translatedMessagesPattern>
				</configuration>
			</plugin>

			<!-- Maven versions report -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.5</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>dependency-updates-report</report>
							<report>plugin-updates-report</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>

	<profiles>

		<!-- System's MakeNSIS profile -->
		<profile>
			<!-- https://packages.debian.org/sid/nsis -->
			<id>system-makensis</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
			</activation>

			<properties>
				<makensis-bin>makensis</makensis-bin>
			</properties>
		</profile>

		<!-- Windows EXE profile -->
		<profile>
			<id>exe</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>download-binaries-windows</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target name="download-windows-binaries">
										<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath" />
										<if>
											<not>
												<available file="${project.basedir}/bin/win32" type="dir"/>
											</not>
											<then>
												<mkdir dir="${project.binaries}"/>
												<mkdir dir="${project.binaries}/win32"/>
												<mkdir dir="${project.binaries}/win32/avisynth"/>
												<mkdir dir="${project.binaries}/win32/codecs"/>
												<mkdir dir="${project.binaries}/win32/fonts"/>
												<mkdir dir="${project.binaries}/win32/fonts/conf.avail"/>
												<mkdir dir="${project.binaries}/win32/fonts/conf.d"/>
												<mkdir dir="${project.binaries}/win32/interframe" />
												<mkdir dir="${project.binaries}/win32/mplayer"/>
												<mkdir dir="${project.binaries}/win32/service"/>
												<get src="${project.binaries-base}/MediaInfo.dll?p=${binary-revision}" dest="${project.binaries}/win32/MediaInfo.dll"  verbose="false"/>
												<get src="${project.binaries-base}/MediaInfo64.dll?p=${binary-revision}" dest="${project.binaries}/win32/MediaInfo64.dll" verbose="false"/>
												<get src="${project.binaries-base}/MediaInfo-License.html?p=${binary-revision}" dest="${project.binaries}/win32/MediaInfo-License.html" verbose="false"/>
												<get src="${project.binaries-base}/win32/LICENSE-dsnative.txt?p=${binary-revision}" dest="${project.binaries}/win32/LICENSE-dsnative.txt" verbose="false"/>
												<get src="${project.binaries-base}/win32/LICENSE-mplayer.txt?p=${binary-revision}" dest="${project.binaries}/win32/LICENSE-mplayer.txt" verbose="false"/>
												<get src="${project.binaries-base}/win32/builds.txt?p=${binary-revision}" dest="${project.binaries}/win32/builds.txt" verbose="false"/>
												<get src="${project.binaries-base}/win32/dcrawMS.exe?p=${binary-revision}" dest="${project.binaries}/win32/dcrawMS.exe" verbose="false"/>
												<get src="${project.binaries-base}/win32/ffmpeg.exe?p=${binary-revision}" dest="${project.binaries}/win32/ffmpeg.exe" verbose="false"/>
												<get src="${project.binaries-base}/win32/ffmpeg64.exe?p=${binary-revision}" dest="${project.binaries}/win32/ffmpeg64.exe" verbose="false"/>
												<get src="${project.binaries-base}/win32/flac.exe?p=${binary-revision}" dest="${project.binaries}/win32/flac.exe" verbose="false"/>
												<get src="${project.binaries-base}/win32/mencoder.exe?p=${binary-revision}" dest="${project.binaries}/win32/mencoder.exe" verbose="false"/>
												<get src="${project.binaries-base}/win32/mplayer.exe?p=${binary-revision}" dest="${project.binaries}/win32/mplayer.exe"  verbose="false"/>
												<get src="${project.binaries-base}/win32/tsMuxeR-new.exe?p=${binary-revision}" dest="${project.binaries}/win32/tsMuxeR.exe" verbose="false"/>
												<get src="${project.binaries-base}/win32/vcomp100.dll?p=${binary-revision}" dest="${project.binaries}/win32/vcomp100.dll" verbose="false"/>
												<get src="${project.binaries-base}/win32/avisynth/avisynth.exe?p=${binary-revision}" dest="${project.binaries}/win32/avisynth/avisynth.exe" verbose="false"/>
												<get src="${project.binaries-base}/win32/codecs/drv33260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drv33260.dll" verbose="false"/>
												<get src="${project.binaries-base}/win32/codecs/drv43260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drv43260.dll" verbose="false"/>
												<get src="${project.binaries-base}/win32/codecs/drvc.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drvc.dll" verbose="false"/>
												<get src="${project.binaries-base}/win32/codecs/pncrt.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/pncrt.dll" verbose="false"/>
												<get src="${project.binaries-base}/win32/codecs/sipr3260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/sipr3260.dll" verbose="false"/>
												<get src="${project.binaries-base}/win32/codecs/tokr3260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/tokr3260.dll"  />
												<get src="${project.binaries-base}/win32/codecs/wma9dmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wma9dmod.dll" verbose="false"/>
												<get src="${project.binaries-base}/win32/codecs/wmv9dmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wmv9dmod.dll"  />
												<get src="${project.binaries-base}/win32/codecs/wmvdmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wmvdmod.dll" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/fonts.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/fonts.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/10-scale-bitmap-fonts.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/10-scale-bitmap-fonts.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/20-unhint-small-vera.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/20-unhint-small-vera.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/30-metric-aliases.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/30-metric-aliases.conf"  />
												<get src="${project.binaries-base}/win32/fonts/conf.d/30-urw-aliases.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/30-urw-aliases.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/40-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/40-nonlatin.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/45-latin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/45-latin.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/49-sansserif.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/49-sansserif.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/50-user.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/50-user.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/51-local.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/51-local.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/60-latin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/60-latin.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/65-fonts-persian.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/65-fonts-persian.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/65-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/65-nonlatin.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/69-unifont.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/69-unifont.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/80-delicious.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/80-delicious.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/90-synthetic.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/90-synthetic.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/fonts/conf.d/README?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/README" verbose="false"/>
												<get src="${project.binaries-base}/win32/interframe/InterFrame2.avsi?p=${binary-revision}" dest="${project.binaries}/win32/interframe/InterFrame2.avsi" verbose="false"/>
												<get src="${project.binaries-base}/win32/interframe/svpflow1.dll?p=${binary-revision}" dest="${project.binaries}/win32/interframe/svpflow1.dll" verbose="false"/>
												<get src="${project.binaries-base}/win32/interframe/svpflow2.dll?p=${binary-revision}" dest="${project.binaries}/win32/interframe/svpflow2.dll" verbose="false"/>
												<get src="${project.binaries-base}/win32/mplayer/config?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/config" verbose="false"/>
												<get src="${project.binaries-base}/win32/mplayer/input.conf?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/input.conf" verbose="false"/>
												<get src="${project.binaries-base}/win32/mplayer/subfont.ttf?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/subfont.ttf" verbose="false"/>
											</then>
										</if>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>nsis-maven-plugin</artifactId>
						<version>1.0-alpha-1</version>
						<executions>
							<execution>
								<id>build-dms-windows</id>
								<configuration>
									<makensisBin>${makensis-bin}</makensisBin>
									<outputFile>${project.name.short}.exe</outputFile>
									<scriptFile>src/main/external-resources/nsis/${project.artifactId}.nsi</scriptFile>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>generate-headerfile</goal>
									<goal>make</goal>
								</goals>
							</execution>
							<execution>
								<id>build-setup-windows</id>
								<configuration>
									<makensisBin>${makensis-bin}</makensisBin>
									<outputFile>${project.name.short}-setup.exe</outputFile>
									<scriptFile>src/main/external-resources/nsis/setup.nsi</scriptFile>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>make</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- General Linux TAR.GZ profile -->
		<profile>
			<id>tgz</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>download-files-linux</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target name="download-linux-binaries">
										<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath"/>
										<if>
											<not>
												<available file="${project.basedir}/bin/linux" type="dir"/>
											</not>
											<then>
												<mkdir dir="${project.binaries}"/>
												<mkdir dir="${project.binaries}/linux"/>
												<get src="${project.binaries-base}/linux/ffmpeg?p=${binary-revision}" dest="${project.binaries}/linux/ffmpeg"/>
												<get src="${project.binaries-base}/linux/ffmpeg64?p=${binary-revision}" dest="${project.binaries}/linux/ffmpeg64"/>
												<get src="${project.binaries-base}/linux/tsMuxeR-new?p=${binary-revision}" dest="${project.binaries}/linux/tsMuxeR"/>
												<get src="${project.binaries-base}/linux/tsMuxeR_licence.txt?p=${binary-revision}" dest="${project.binaries}/linux/tsMuxeR_license.txt"/>
											</then>
										</if>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<execution>
								<id>build-dms-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<finalName>${project.artifactId}-${project.version}-x86-64</finalName>
									<appendAssemblyId>false</appendAssemblyId>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-linux.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<addClasspath>true</addClasspath>
											<mainClass>${project.mainclass}</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-clean-plugin</artifactId>
						<version>${maven-clean-plugin-version}</version>
						<executions>
							<execution>
								<id>auto-clean</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>clean</goal>
								</goals>
								<configuration>
									<failOnError>false</failOnError>
									<excludeDefaultDirectories>true</excludeDefaultDirectories>
									<filesets>
										<fileset>
											<directory>${project.build.directory}</directory>
											<includes>
												<include>${project.name}-${project.version}/**</include>
											</includes>
										</fileset>
									</filesets>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Linux DEB profile
			Can also be used by Arch Linux users if converted with DEBTAP:
			https://github.com/helixarch/debtap
			https://www.ostechnix.com/convert-deb-packages-arch-linux-packages/
		-->
		<profile>
			<id>deb</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>create-control-linux</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<!--
										Latest MediaInfo:
										deb http://ftp.de.debian.org/debian sid main
										Latest tsMuxeR:
										deb http://archive.getdeb.net/ubuntu xenial-getdeb apps
										Latest FFmpeg:
										deb http://ftp.de.debian.org/debian experimental main
										Latest VLC:
										deb http://ftp.de.debian.org/debian buster main
									-->
									<target>
										<mkdir dir="${project.build.directory}/control" />
										<chmod dir="${project.build.directory}/control" type="dir" perm="0755"/>
										<echo file="${project.build.directory}/control/control" force="true">Package: ${project.artifactId}${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Version: ${project.version}${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Section: java${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Priority: standard${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Architecture: all${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Depends: default-jre-headless (>= 1.7) | default-jre (>= 1.7) | java-runtime-headless (>= 1.7) | java-runtime (>= 1.7) | java-sdk (>= 1.7) | openjdk-7-jdk | openjdk-7-jre | openjdk-8-jdk | openjdk-8-jre | openjdk-7-jre-headless | openjdk-8-jre-headless | oracle-java7-jdk | oracle-java8-jdk | oracle-java7-jre | oracle-java8-jre | java7-runtime | java8-runtime | java7-runtime-headless | java8-runtime-headless ${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Recommends: dcraw, ffmpeg, mediainfo, mencoder${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Suggests: vlc (>= 3.0.0), mencoder, tsmuxer${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Maintainer: Nadahar &lt;nadahar@dms.com&gt;${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Description: Media server${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Distribution: stable${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Homepage: http://www.digitalmediaserver.com/${line.separator}</echo>
										<chmod file="${project.build.directory}/control/control" perm="0644"/>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.vafer</groupId>
						<artifactId>jdeb</artifactId>
						<!-- Above versions doesn't support Java 7 -->
						<version>1.5</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>jdeb</goal>
								</goals>
								<configuration>
									<deb>${project.build.directory}/${project.artifactId}-${project.version}_all.deb</deb>
									<verbose>false</verbose>
									<controlDir>${project.build.directory}/control</controlDir>
									<compression>xz</compression>
									<controlInfo>
										<package>${project.artifactId}</package>
										<version>${project.version}</version>
										<section>java</section>
										<priority>standard</priority>
										<architecture>all</architecture>
										<depends>default-jre-headless (>= 1.7) | default-jre (>= 1.7) | java-runtime-headless (>= 1.7) | java-runtime (>= 1.7) | java-sdk (>= 1.7) | openjdk-7-jdk | openjdk-7-jre | openjdk-8-jdk | openjdk-8-jre | openjdk-7-jre-headless | openjdk-8-jre-headless | oracle-java7-jdk | oracle-java8-jdk | oracle-java7-jre | oracle-java8-jre | java7-runtime | java8-runtime | java7-runtime-headless | java8-runtime-headless</depends>
										<recommends>dcraw, ffmpeg, mediainfo</recommends>
										<suggests>vlc (>= 3.0.0), mencoder, tsmuxer</suggests>
										<description>Media server</description>
										<maintainer>Nadahar</maintainer>
										<distribution>stable</distribution>
										<maintainer>Nadahar &lt;nadahar@dms.com&gt;</maintainer>
									</controlInfo>
									<dataSet>
										<data>
											<src>${project.external-resources}/documentation</src>
											<type>directory</type>
											<missingSrc>ignore</missingSrc>
											<mapper>
												<type>perm</type>
												<prefix>/usr/lib/${project.artifactId}/documentation</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.external-resources}/plugins</src>
											<type>directory</type>
											<missingSrc>ignore</missingSrc>
											<mapper>
												<type>perm</type>
												<prefix>/usr/lib/${project.artifactId}/plugins</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.external-resources}/renderers</src>
											<type>directory</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/lib/${project.artifactId}/renderers</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.external-resources}/web</src>
											<type>directory</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/lib/${project.artifactId}/web</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.external-resources}</src>
											<type>directory</type>
											<includes>*.*</includes>
											<excludes>*.sh, *.bat, *.conf, *.webfilters</excludes>
											<mapper>
												<type>perm</type>
												<strip>1</strip>
												<prefix>/usr/lib/${project.artifactId}</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.external-resources}</src>
											<type>directory</type>
											<includes>*.conf, *.webfilters</includes>
											<conffile>true</conffile>
											<mapper>
												<type>perm</type>
												<strip>1</strip>
												<prefix>${project.skelprofile.dir}${project.name.camel}</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.build.directory}/${project.artifactId}.jar</src>
											<dst>/usr/lib/${project.artifactId}/${project.artifactId}.jar</dst>
											<type>file</type>
										</data>
										<data>
											<src>${project.external-resources}/${project.artifactId}.sh</src>
											<dst>/usr/lib/${project.artifactId}/${project.artifactId}.sh</dst>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<filemode>755</filemode>
											</mapper>
										</data>
										<data>
											<linkName>/usr/bin/${project.artifactId}</linkName>
											<linkTarget>/usr/lib/${project.artifactId}/${project.artifactId}.sh</linkTarget>
											<symlink>true</symlink>
											<type>link</type>
										</data>
										<data>
											<linkName>/usr/bin/${project.name.short}</linkName>
											<linkTarget>/usr/lib/${project.artifactId}/${project.artifactId}.sh</linkTarget>
											<symlink>true</symlink>
											<type>link</type>
										</data>
									</dataSet>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Linux RPM profile -->
		<profile>
			<id>rpm</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<jdk>[1.8,)</jdk>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>de.dentrassi.maven</groupId>
						<artifactId>rpm</artifactId>
						<version>0.10.2</version>
						<executions>
							<execution>
								<goals>
									<goal>rpm</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<attach>false</attach>
							<group>Application/Internet</group>
							<license>GPLv2+</license>
							<skipSigning>true</skipSigning>
							<!--
								Currently it is created by default with "-arch.rpm" suffix, but the  convention is to use ".arch.rpm" so it will fail to install on some distributions.

							-->
							<outputFileName>${project.artifactId}-${project.version}.noarch.rpm</outputFileName>
							<leadOverrideArchitecture/>
							<leadOverrideOperatingSystem/>
							<requires>
								<!--
									https://github.com/puzzle/java-oracle-rpm/blob/master/java-1.7.0-oracle-devel.spec
									(jre &gt;= 1:1.7.0 or java &gt;= 1.8 or java-headless &gt;= 1:1.7.0)
								-->
								<require>java &gt;= 1.7</require>
							</requires>
							<rulesets>
								<ruleset>
									<id>default-settings</id>
									<rules>
										<rule>
											<user>root</user>
											<group>root</group>
										</rule>
										<rule>
											<when>
												<type>directory</type>
											</when>
											<mode>0755</mode>
										</rule>
										<rule>
											<when>
												<type>file</type>
											</when>
											<mode>0644</mode>
										</rule>
										<rule>
											<when>
												<prefix>${project.skelprofile.dir}</prefix>
											</when>
											<configuration>true</configuration>
											<missingOk>true</missingOk>
											<noreplace>true</noreplace>
										</rule>
										<file>
											<when>
												<suffix>README.txt</suffix>
											</when>
											<readme>true</readme>
										</file>
									</rules>
								</ruleset>
							</rulesets>
							<entries>
								<entry>
									<name>/usr/lib/${project.artifactId}</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}/data</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/documentation</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/documentation</name>
									<collect>
										<from>${project.external-resources}/documentation</from>
										<directories>true</directories>
									</collect>
									<ruleset>default-settings</ruleset>
									<documentation>true</documentation>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/plugins</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/plugins</name>
									<collect>
										<from>${project.external-resources}/plugins</from>
										<directories>true</directories>
									</collect>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/renderers</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/renderers</name>
									<collect>
										<from>${project.external-resources}/renderers</from>
										<directories>false</directories>
									</collect>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/web</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/web</name>
									<collect>
										<from>${project.external-resources}/web</from>
										<directories>true</directories>
									</collect>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/${project.artifactId}.sh</name>
									<file>${project.external-resources}/${project.artifactId}.sh</file>
									<ruleset>default-settings</ruleset>
									<mode>0755</mode>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/logback.xml</name>
									<file>${project.external-resources}/logback.xml</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/logback.headless.xml</name>
									<file>${project.external-resources}/logback.headless.xml</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/DummyInput.jpg</name>
									<file>${project.external-resources}/DummyInput.jpg</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/DummyInput.ass</name>
									<file>${project.external-resources}/DummyInput.ass</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/lib/${project.artifactId}/${project.artifactId}.jar</name>
									<file>${project.build.directory}/${project.artifactId}.jar</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}/WEB.conf</name>
									<file>${project.external-resources}/WEB.conf</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}/${project.name.short}.conf</name>
									<file>${project.external-resources}/${project.name.short}.conf</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}/VirtualFolders.conf</name>
									<file>${project.external-resources}/VirtualFolders.conf</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}/ffmpeg.webfilters</name>
									<file>${project.external-resources}/ffmpeg.webfilters</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/bin/${project.artifactId}</name>
									<linkTo>/usr/lib/${project.artifactId}/${project.artifactId}.sh</linkTo>
								</entry>
								<entry>
									<name>/usr/bin/${project.name.short}</name>
									<linkTo>/usr/lib/${project.artifactId}/${project.artifactId}.sh</linkTo>
								</entry>
							</entries>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Arch Linux based PKG.TAR.XZ profile -->
		<profile>
			<id>arch</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<jdk>[1.8,)</jdk>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>prepare-package-archlinux</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- TODO: daemon install
											https://www.archlinux.org/pacman/PKGBUILD.5.html#_install_upgrade_remove_scripting
										-->
										<echo file="${project.build.directory}/install" force="true">pre_install() {${line.separator}</echo>
										<echo file="${project.build.directory}/install" append="true">echo "pre_install($1)"${line.separator}</echo>
										<echo file="${project.build.directory}/install" append="true">}${line.separator}</echo>
										<echo file="${project.build.directory}/install" append="true">${line.separator}</echo>
										<echo file="${project.build.directory}/install" append="true">post_install() {${line.separator}</echo>
										<echo file="${project.build.directory}/install" append="true">echo "post_install($1)"${line.separator}</echo>
										<echo file="${project.build.directory}/install" append="true">}${line.separator}</echo>

										<copy todir="${project.build.directory}/archlinux/${project.skelprofile.dir}${project.name.camel}"> overwrite="true"
											<fileset dir="${project.external-resources}" includes="*.conf"/>
										</copy>
										<copy todir="${project.build.directory}/archlinux/opt/${project.name.camel}"> overwrite="true"
											<fileset dir="${project.external-resources}"  includes="plugins/**, documentation/**, web/**, renderers/**, *.ass, *.jpg, *.webfilters, *.sh, *.xml"/>
										</copy>
										<copy file="${project.build.directory}/${project.artifactId}.jar" todir="${project.build.directory}/archlinux/opt/${project.name.camel}"/>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.github.gino0631</groupId>
						<artifactId>pac-maven-plugin</artifactId>
						<version>1.0</version>
						<executions>
							<execution>
								<id>create-arch-package</id>
								<phase>package</phase>
								<goals>
									<goal>package</goal>
								</goals>
								<configuration>
									<root>${project.build.directory}/archlinux</root>
									<packageName>${project.artifactId}</packageName>
									<packageVersion/> <!-- https://github.com/gino0631/pac/issues/2 -->
									<releaseNumber>1</releaseNumber>
									<architecture>any</architecture>
									<description>DLNA Media server</description>
									<url>https://www.digitalmediaserver.com</url>
									<packager>Not Me &lt;notme@unknown.com&gt;</packager>
									<licenses>
										<license>GPLv2+</license>
									</licenses>
									<!-- https://aur.archlinux.org/packages/tsmuxer/
										https://aur.archlinux.org/packages/tsmuxer-ng-cli-bin/
									-->
									<depends> <!-- In "Extra" repository except for MediaInfo that is in "Community" one -->
										<depend>java-runtime</depend>
										<depend>ffmpeg</depend>
										<depend>mediainfo</depend>
										<depend>dcraw</depend>
										<depend>mencoder</depend>
										<!-- <depend>vlc</depend> -->
									</depends>
									<permissionSets>
										<permissionSet>
											<includes>
												<include>**/*.sh</include>
											</includes>
											<fileMode>0755</fileMode>
										</permissionSet>
									</permissionSets>
									<entries>
										<symlink>
											<name>/usr/bin/${project.artifactId}</name>
											<linkTo>/opt/${project.name.camel}/${project.artifactId}.sh</linkTo>
										</symlink>
										<symlink>
											<name>/usr/bin/${project.name.short}</name>
											<linkTo>/opt/${project.name.camel}/${project.artifactId}.sh</linkTo>
										</symlink>
									</entries>
									<installScript>${project.build.directory}/install</installScript>
									<outputFile>${project.artifactId}-${project.version}-any.pkg.tar.xz</outputFile>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-clean-plugin</artifactId>
						<version>${maven-clean-plugin-version}</version>
						<executions>
							<execution>
								<id>auto-clean</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>clean</goal>
								</goals>
								<configuration>
									<failOnError>false</failOnError>
									<excludeDefaultDirectories>true</excludeDefaultDirectories>
									<filesets>
										<fileset>
											<directory>${project.build.directory}</directory>
											<includes>
												<include>archlinux/**</include>
												<include>install</include>
											</includes>
										</fileset>
									</filesets>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- macOS PKG profile -->
		<profile>
			<id>pkg</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<jdk>[1.8,)</jdk>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>prepare-binaries-pkg</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target name="download-osx-binaries">
										<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath"/>
										<if>
											<not>
												<available file="${project.basedir}/bin/osx" type="dir"/>
											</not>
											<then>
												<mkdir dir="${project.binaries}"/>
												<mkdir dir="${project.binaries}/osx"/>
												<get src="${project.binaries-base}/osx/dcraw" dest="${project.binaries}/osx/dcraw"/>
												<get src="${project.binaries-base}/osx/ffmpeg" dest="${project.binaries}/osx/ffmpeg"/>
												<get src="${project.binaries-base}/osx/flac" dest="${project.binaries}/osx/flac"/>
												<get src="${project.binaries-base}/osx/libmediainfo.dylib" dest="${project.binaries}/osx/libmediainfo.dylib"/>
												<get src="${project.binaries-base}/MediaInfo-License.html" dest="${project.binaries}/osx/MediaInfo-License.html"/>
												<get src="${project.binaries-base}/osx/mencoder" dest="${project.binaries}/osx/mencoder"/>
												<get src="${project.binaries-base}/osx/mplayer" dest="${project.binaries}/osx/mplayer"/>
												<get src="${project.binaries-base}/osx/tsMuxeR-new" dest="${project.binaries}/osx/tsMuxeR"/>
											</then>
										</if>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>package-app</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- TODO: target/macOS-pkg folder should be cleaned first -->
										<mkdir dir="${project.build.directory}/macOS-pkg/Applications/${project.name}.app"/>
										<chmod dir="${project.build.directory}/macOS-pkg/Applications/${project.name}.app" type="dir" perm="0755"/>
										<!--                                                       -->
										<taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask"
											classpath="${project.external-resources}/lib/appbundler-1.4.jar"/>
										<bundleapp outputdirectory="${project.build.directory}/macOS-pkg/Applications"
													name="${project.name}"
													displayname="${project.name}"
													executableName="${project.name.short}"
													identifier="${project.mainclass}"
													version="${project.version}"
													icon="${project.basedir}/src/main/resources/images/logo.icns"
													applicationCategory="public.app-category.entertainment"
													workingdirectory="$APP_ROOT/Contents/Resources"
													mainclassname="${project.mainclass}">
											<classpath file="${project.build.directory}/${project.artifactId}.jar"/>
											<option value="-Xmx768M"/>
											<option value="-Xss16M"/>
											<option value="-Dfile.encoding=UTF-8"/>
											<option value="-Djava.net.preferIPv4Stack=true"/>
											<option value="-Xdock:icon=Contents/Resources/logo.icns"/>
											<option value="-Xdock:name=${project.name}"/>
											<option value="-Djna.nosys=true"/>
										</bundleapp>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<execution>
								<id>make-assembly-macos</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<appendAssemblyId>false</appendAssemblyId>
									<finalName>macOS-pkg</finalName>
									<attach>false</attach>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-macos.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>${project.mainclass}</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.github.gino0631</groupId>
						<artifactId>pkg-maven-plugin</artifactId>
						<version>1.2-SNAPSHOT</version>
						<executions>
							<execution>
								<id>create-macosx-pkg</id>
								<phase>package</phase>
								<goals>
									<goal>product</goal>
								</goals>
								<configuration>
									<root>${project.build.directory}/macOS-pkg</root>
									<outputFile>${project.name.short}-${project.version}.pkg</outputFile>
									<packageIdentifier>${project.groupId}.${project.artifactId}.pkg</packageIdentifier>
									<packageVersion>${project.version}</packageVersion>
									<packageTitle>${project.name}</packageTitle>
									<distribution>
										<background>
											<alignment>bottomLeft</alignment>
											<scaling>proportional</scaling>
											<resources>
												<resource>${project.basedir}/src/main/resources/images/splash.png</resource>
											</resources>
										</background>
										<license>
											<resources>
												<resource>${project.basedir}/src/main/external-resources/osx/license.rtf</resource>
												<resource>
													<file>${project.basedir}/src/main/external-resources/osx/gpl-2.0-fr.rtf</file>
													<lang>fr</lang>
												</resource>
											</resources>
										</license>
										<!--readme>${project.basedir}/src/main/external-resources/readme.rtf</readme>
										<conclusion>${project.basedir}/src/main/external-resources/conclusion.rtf</conclusion-->
									</distribution>
									<permissionSets>
										<permissionSet>
											<includes>
												<include>**/*.sh</include>
											</includes>
											<excludes/>
											<fileMode>0755</fileMode>
										</permissionSet>
									</permissionSets>
									<!--signing>
										<keystore>${project.build.directory}/dms.p12</keystore>
										<storetype>PKCS12</storetype>
										<storepass>${project.name.camel}</storepass>
										<tsa>http://timestamp.apple.com/ts01</tsa>
										<skip>true</skip>
									</signing-->
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-clean-plugin</artifactId>
						<version>${maven-clean-plugin-version}</version>
						<executions>
							<execution>
								<id>auto-clean</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>clean</goal>
								</goals>
								<configuration>
									<failOnError>false</failOnError>
									<excludeDefaultDirectories>true</excludeDefaultDirectories>
									<filesets>
										<fileset>
											<directory>${project.build.directory}</directory>
											<includes>
												<include>macOS-pkg/**</include>
											</includes>
										</fileset>
									</filesets>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- macOS DMG profile. "genisoimage" need to be installed for Linux OS:
			sudo dnf install genisoimage (Fedora based)
			sudo pacman -S cdrtools (Arch based)
			sudo apt-get install genisoimage (Debian based)
		-->
		<profile>
			<id>dmg</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<!-- Not until appbundle-maven-plugin:1.2.1 stable version is release
				<os>
					<family>!windows</family>
				</os>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
				-->
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>prepare-binaries-osx</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target name="download-osx-binaries">
										<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath"/>
										<if>
											<not>
												<available file="${project.basedir}/bin/osx" type="dir"/>
											</not>
											<then>
												<mkdir dir="${project.binaries}"/>
												<mkdir dir="${project.binaries}/osx"/>
												<get src="${project.binaries-base}/osx/dcraw" dest="${project.binaries}/osx/dcraw"/>
												<get src="${project.binaries-base}/osx/ffmpeg" dest="${project.binaries}/osx/ffmpeg"/>
												<get src="${project.binaries-base}/osx/flac" dest="${project.binaries}/osx/flac"/>
												<get src="${project.binaries-base}/osx/libmediainfo.dylib" dest="${project.binaries}/osx/libmediainfo.dylib"/>
												<get src="${project.binaries-base}/MediaInfo-License.html" dest="${project.binaries}/osx/MediaInfo-License.html"/>
												<get src="${project.binaries-base}/osx/mencoder" dest="${project.binaries}/osx/mencoder"/>
												<get src="${project.binaries-base}/osx/mplayer" dest="${project.binaries}/osx/mplayer"/>
												<get src="${project.binaries-base}/osx/tsMuxeR-new" dest="${project.binaries}/osx/tsMuxeR"/>
											</then>
										</if>
									</target>
									<target>
										<mkdir dir="${project.build.directory}/${project.name.camel}-app"/>
										<symlink link="${project.build.directory}/${project.name.camel}-app/Applications" resource="/Applications" overwrite="true" failonerror="false"/>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<execution>
								<id>make-assembly-dmg</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<finalName>${project.name.camel}</finalName>
									<attach>false</attach>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-osx.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>${project.mainclass}</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>sh.tak.appbundler</groupId>
						<artifactId>appbundle-maven-plugin</artifactId>
						<version>${appbundle-maven-plugin-version}</version>
						<configuration>
							<mainClass>${project.mainclass}</mainClass>
							<generateDiskImageFile>true</generateDiskImageFile>
							<diskImageInternetEnable>false</diskImageInternetEnable>
							<buildDirectory>${project.build.directory}/${project.name.camel}-app</buildDirectory>
							<workingDirectory>$APP_ROOT/Contents/Resources</workingDirectory>
							<dictionaryFile>resources/Info.plist</dictionaryFile>
							<javaLauncherName/>
							<iconFile>src/main/resources/images/logo.icns</iconFile>
							<includeApplicationsSymlink>true</includeApplicationsSymlink>
							<!--
								Option need for use the shaded JAR only. Need 1.2.1-SNAPSHOT
								<excludeDependencies>true</excludeDependencies>
							-->
							<bundleName>${project.name}</bundleName>
							<jvmVersion>1.7+</jvmVersion>
								<!-- <jvmOption>-XaddExports:java.desktop/com.apple.eawt=ALL-UNNAMED</jvmOption> -->
							<jvmOptions>
								<jvmOption>-Xmx768M</jvmOption>
								<jvmOption>-Xss16M</jvmOption>
								<jvmOption>-Dfile.encoding=UTF-8</jvmOption>
								<jvmOption>-Djava.net.preferIPv4Stack=true</jvmOption>
								<jvmOption>-Xdock:icon=Contents/Resources/logo.icns</jvmOption>
								<jvmOption>-Xdock:name=&quot;${project.name}&quot;</jvmOption>
								<jvmOption>-Djna.nosys=true</jvmOption>
								<jvmOption>-XX:+UseParallelGC</jvmOption>
								<jvmOption>-XX:+IgnoreUnrecognizedVMOptions</jvmOption>
							</jvmOptions>
							<additionalClasspath/>
							<additionalBundledClasspathResources/>
							<additionalResources>
								<fileSet>
									<directory>target/${project.name.camel}-app</directory>
									<includes>
										<include>**/**</include>
									</includes>
								</fileSet>
								<fileSet>
									<directory>src/main/external-resources/osx</directory>
									<includes>
										<include>.background/**</include>
										<include>.DS_Store</include>
									</includes>
								</fileSet>
							</additionalResources>
						</configuration>
						<executions>
							<execution>
								<id>MakeDMG</id>
								<configuration>
									<diskImageFile>${project.build.directory}/${project.name.short}-${project.version}.dmg</diskImageFile>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>bundle</goal>
								</goals>
							</execution>
								<!-- Provide JRE when target environment doesn't have it
									https://ymasory.github.io/OrangeExtensions/
									https://java.com/en/download/help/mac_install.xml
									http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html
								<configuration>
									<jrePath>/Library/Java/JavaVirtualMachines/jre1.8.0_151.jre</jrePath>
									<jreFullPath/>
									<diskImageFile>${project.build.directory}/${project.artifactId}-${project.version}_with_JRE.dmg</diskImageFile>
								</configuration>
								-->
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-clean-plugin</artifactId>
						<version>${maven-clean-plugin-version}</version>
						<executions>
							<execution>
								<id>auto-clean</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>clean</goal>
								</goals>
								<configuration>
									<failOnError>false</failOnError>
									<excludeDefaultDirectories>true</excludeDefaultDirectories>
									<filesets>
										<fileset>
											<directory>${project.build.directory}</directory>
											<includes>
												<include>${project.name.camel}-app/**</include>
											</includes>
										</fileset>
									</filesets>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- macOS profile: build the pre-final package. It need "osascript".
			Note: This does not make the .dmg so you will have to do that manually.
			The open source dmgCreator can be used.
		-->
		<profile>
			<id>osx</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>prepare-binaries-osx</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target name="download-osx-binaries">
										<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath"/>
										<if>
											<not>
												<available file="${project.basedir}/bin/osx" type="dir"/>
											</not>
											<then>
												<mkdir dir="${project.binaries}"/>
												<mkdir dir="${project.binaries}/osx"/>
												<get src="${project.binaries-base}/osx/dcraw" dest="${project.binaries}/osx/dcraw"/>
												<get src="${project.binaries-base}/osx/ffmpeg" dest="${project.binaries}/osx/ffmpeg"/>
												<get src="${project.binaries-base}/osx/flac" dest="${project.binaries}/osx/flac"/>
												<get src="${project.binaries-base}/osx/libmediainfo.dylib" dest="${project.binaries}/osx/libmediainfo.dylib"/>
												<get src="${project.binaries-base}/MediaInfo-License.html" dest="${project.binaries}/osx/MediaInfo-License.html"/>
												<get src="${project.binaries-base}/osx/mencoder" dest="${project.binaries}/osx/mencoder"/>
												<get src="${project.binaries-base}/osx/mplayer" dest="${project.binaries}/osx/mplayer"/>
												<get src="${project.binaries-base}/osx/tsMuxeR-new" dest="${project.binaries}/osx/tsMuxeR"/>
											</then>
										</if>
									</target>
									<target>
										<!-- Make sure the target folder exists -->
										<mkdir dir="${project.build.directory}/${project.name}-app"/>
										<!-- Create the shortcut to the Applications folder -->
										<exec executable="/usr/bin/osascript">
											<arg value="-e"/>
											<arg value="tell application &quot;Finder&quot;"/>
											<arg value="-e"/>
											<arg value="set src to POSIX file &quot;/Applications&quot;"/>
											<arg value="-e"/>
											<arg value="set dest to POSIX file &quot;${project.build.directory}/${project.name.camel}-app&quot;"/>
											<arg value="-e"/>
											<arg value="make new alias file to folder src at folder dest"/>
											<arg value="-e"/>
											<arg value="end tell"/>
										</exec>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>package-app</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask"
											classpath="${project.external-resources}/lib/appbundler-1.4.jar"/>
										<bundleapp outputdirectory="${project.build.directory}/${project.name.camel}-app"
													name="${project.name}"
													displayname="${project.name}"
													executableName="${project.name.short}"
													identifier="${project.mainclass}"
													version="${project.version}"
													icon="${project.basedir}/src/main/resources/images/logo.icns"
													applicationCategory="public.app-category.entertainment"
													workingdirectory="$APP_ROOT/Contents/Resources"
													mainclassname="${project.mainclass}">
											<classpath file="${project.build.directory}/${project.artifactId}.jar"/>
											<option value="-Xmx768M"/>
											<option value="-Xss16M"/>
											<option value="-Dfile.encoding=UTF-8"/>
											<option value="-Djava.net.preferIPv4Stack=true"/>
											<option value="-Xdock:icon=Contents/Resources/logo.icns"/>
											<option value="-Xdock:name=${project.name}"/>
											<option value="-Djna.nosys=true"/>
										</bundleapp>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<execution>
								<id>make-assembly-osx</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<finalName>${project.name}</finalName>
									<attach>false</attach>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-osx.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>${project.mainclass}</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Build's checksums profile -->
		<profile>
			<id>checksum</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>net.nicoulaj.maven.plugins</groupId>
						<artifactId>checksum-maven-plugin</artifactId>
						<version>1.6</version>
						<!-- Rely on org.bouncycastle:bcprov-jdk15on dependency -->
						<executions>
							<execution>
								<id>checksum-files</id>
								<phase>package</phase>
								<goals>
									<goal>files</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<quiet>true</quiet>
							<!-- Choose the prefered one -->
							<shasumSummary>true</shasumSummary>
							<xmlSummary>true</xmlSummary>
							<csvSummary>false</csvSummary>
							<failOnError>false</failOnError>
							<algorithms>
								<algorithm>SHA-256</algorithm>
								<!-- <algorithm>MD5</algorithm> -->
							</algorithms>
							<fileSets>
								<fileSet>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>${project.name.short}-setup.exe</include>
										<include>${project.artifactId}-${project.version}-x86-64.tgz</include>
										<include>${project.artifactId}-${project.version}_all.deb</include>
										<include>${project.artifactId}-${project.version}.noarch.rpm</include>
										<include>${project.name.short}-${project.version}.pkg</include>
										<include>${project.artifactId}-${project.version}-any.pkg.tar.xz</include>
										<include>${project.name.short}-${project.version}.dmg</include>
									</includes>
								</fileSet>
							</fileSets>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			This profile allows running DMS from inside Eclipse
			(Requires a "mvn clean prepare-package" to download the binaries first)
		-->
		<profile>
			<id>eclipse</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
						<!--
							This plugin's configuration is used to store Eclipse m2e settings only.
							https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html
						-->
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>1.0.0</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-antrun-plugin</artifactId>
												<versionRange>[1.7.0-60,)</versionRange>
												<goals>
													<goal>run</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>pl.project13.maven</groupId>
												<artifactId>git-commit-id-plugin</artifactId>
												<versionRange>[${git-commit-id-plugin-version},)</versionRange>
												<goals>
													<goal>revision</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>com.universalmediaserver</groupId>
												<artifactId>external-maven-plugin</artifactId>
												<versionRange>[0.1,)</versionRange>
												<goals>
													<goal>clean</goal>
													<goal>resolve</goal>
													<goal>localinstall</goal>
													<goal>install</goal>
													<goal>deploy</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<execute></execute>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.digitalmediaserver</groupId>
												<artifactId>crowdin-maven-plugin</artifactId>
												<versionRange>[0.1,)</versionRange>
												<goals>
													<goal>fetch</goal>
													<goal>push</goal>
													<goal>build</goal>
													<goal>apply</goal>
													<goal>pull</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<execute></execute>
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
	</profiles>
</project>
