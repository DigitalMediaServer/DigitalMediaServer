<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!--
		DMS consists of two major parts: DMS itself and the third party software needed to
		run it. While DMS itself is 100% pure Java, some of the third party software are
		not. This means building a platform specific distribution boils down to first
		building the dms.jar and then assembling all application resources.

		Note that Maven 3 does not automatically install all dependencies, unlike Maven 2.
		To install external dependencies to your local repository, run the following commands:

		mvn external:install
		or
		mvn dependency:go-offline

		To build DMS, do:

			mvn clean package

		After building, the "target" directory will contain the binary.
		To generate a full source code report, run:

			mvn site

		After generating, the "target/site" directory will contain the reports.
		
		Note:
		Maven version 3.3.3 or above should be prefered, also if the version 3.2.0 will be able to build.
	-->

	<modelVersion>4.0.0</modelVersion>
	<groupId>org.digitalmediaserver</groupId>
	<artifactId>dms</artifactId>
	<name>Digital Media Server</name>
	<packaging>jar</packaging>
	<version>0.0.2-SNAPSHOT</version>
	<url>http://www.digitalmediaserver.org/</url>
	<inceptionYear>2016</inceptionYear>
	<organization>
		<name>Digital Media Server</name>
		<url>http://www.digitalmediaserver.org/</url>
	</organization>
	<licenses>
		<license>
			<name>GNU General Public License version 2</name>
			<url>http://www.gnu.org/licenses/gpl-2.0.txt</url>
			<distribution>manual</distribution>
		</license>
	</licenses>
	<description>
		Digital Media Server is a DLNA compatible UPnP AV Media Server. It is
		capable of sharing digital video, audio and image resources to UPnP AV
		and DLNA capable devices. It is based on PS3 Media Server by shagrath
		and Universal Media Server.

		Digital Media Server supports Windows, Linux and OS X. The program
		streams or transcodes many different media formats with little or no
		configuration. It is powered by MEncoder, FFmpeg, tsMuxeR, AviSynth,
		MediaInfo, VLC, OpenSubtitles.org and more, which combine to offer
		support for a wide range of media formats.	
	</description>
	<scm>
		<connection>scm:git:git://github.com/DigitalMediaServer/DigitalMediaServer.git</connection>
		<developerConnection>scm:git:git@github.com:DigitalMediaServer/DigitalMediaServer.git</developerConnection>
		<tag>master</tag>
		<url>https://github.com/DigitalMediaServer/DigitalMediaServer</url>
	</scm>
	<issueManagement>
		<system>GitHub</system>
		<url>https://github.com/DigitalMediaServer/DigitalMediaServer/issues</url>
	</issueManagement>
	<properties>
		<project.name.short>DMS</project.name.short>
		<project.name.camel>DigitalMediaServer</project.name.camel>
		<project.skelprofile.dir>/etc/skel/.config/</project.skelprofile.dir>
		<cuelib-version>1.2.1-2008-06-13</cuelib-version>

		<!-- In versions after 1.6.0, they removed code that the MovieInfo plugin relies on -->
		<jgoodies-forms-version>1.9.0</jgoodies-forms-version>

		<!-- Version 2.7.0 is the last free version. The latest libraries are shipped only with the commercial JGoodies Smart Client -->
		<jgoodies-looks-version>2.7.0</jgoodies-looks-version>

		<!-- Skip 4.65-1.05-RC because it doesn't work, author is working on fixing it -->
		<sevenzip-version>4.65-1.04-RC</sevenzip-version>

		<twelvemonkeys-imageio-version>3.3.2</twelvemonkeys-imageio-version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.external-resources>${project.basedir}/src/main/external-resources</project.external-resources>
		<project.binaries>${project.basedir}/bin</project.binaries>

		<project.binaries-base>http://universalmediaserver.com/svn/binaries</project.binaries-base>
		<binary-revision>71</binary-revision>

		<maven-javadoc-plugin-version>3.0.0</maven-javadoc-plugin-version>
		<git-commit-id-plugin-version>2.2.4</git-commit-id-plugin-version>
		<maven-assembly-plugin-version>3.1.0</maven-assembly-plugin-version>
		<maven-resources-plugin-version>3.0.2</maven-resources-plugin-version>
		<maven-enforcer-plugin-version>3.0.0-M1</maven-enforcer-plugin-version>

		<!--
			org.slf4j:slf4j-api is shared with
				- su.litvak.chromecast:api-v2
				- fm.last:coverartarchive-api
				- com.github.oshi:oshi-core
				- com.rometools:rome

			Check the org.slf4j:slf4j-api version of the other libraries before upgrading
		-->
		<logback-version>1.2.3</logback-version>
		<surefire-version>2.20</surefire-version>

		<!--
			net.java.dev.jna:jna-platform is shared with
				- com.github.oshi:oshi-core

			Check the net.java.dev.jna:jna-platform version of the other library before upgrading
		-->
		<jna-version>4.4.0</jna-version>

		<!-- Use makensis.exe for Windows builds -->
		<makensis-bin>${project.external-resources}/third-party/nsis/makensis.exe</makensis-bin>
		<release>false</release> <!-- mvn -Drelease=true -->
	</properties>
	<repositories>
		<repository>
			<id>central</id>
			<name>Maven Plugin Repository</name>
			<url>https://repo1.maven.org/maven2</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>daily</updatePolicy>
				<checksumPolicy>warn</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>4thline-repo</id>
			<name>Repository used for Cling</name>
			<url>http://4thline.org/m2</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
				<checksumPolicy>warn</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>jaudiotagger-repository</id>
			<url>https://dl.bintray.com/pathrik/PathriK</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
				<checksumPolicy>fail</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>
		<!-- TODO this can be removed when MEncoder is removed -->
		<dependency>
			<groupId>org.beanshell</groupId>
			<artifactId>bsh-core</artifactId>
			<version>2.0b4</version>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.2</version>
		</dependency>
		<dependency>
			<groupId>commons-configuration</groupId>
			<artifactId>commons-configuration</artifactId>
			<!--
				commons-logging:commons-logging is shared with
					- com.github.junrar:junrar
					- fm.last:coverartarchive-api

				Check the commons-logging:commons-logging version of the other libraries before upgrading
			-->
			<version>1.10</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<!--
				commons-io:commons-io is shared with
					- fm.last:coverartarchive-api

				Check the commons-io:commons-io version of the library before upgrading
			-->
			<version>2.6</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.7</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.196</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback-version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback-version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.2</version>
		</dependency>
		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty</artifactId> <!-- Use 'netty-all' for 4.0 or above -->
			<version>3.10.6.Final</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.rometools</groupId>
			<artifactId>rome</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- su.litvak.chromecast
					- fm.last:coverartarchive-api
					- com.github.oshi:oshi-core

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading
			-->
			<version>1.9.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>net.coobird</groupId>
			<artifactId>thumbnailator</artifactId>
			<version>[0.4, 0.5)</version>
		</dependency>

		<!--
			If any ImageIO plugins are added or removed, corresponding changes
		 	must be made in src/main/external-resources/META-INF/services
		 -->
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-bmp</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-core</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-icns</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-iff</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-jpeg</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-hdr</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-metadata</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pcx</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pict</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pnm</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-psd</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-sgi</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-tga</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-tiff</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.drewnoakes</groupId>
			<artifactId>metadata-extractor</artifactId>
			<version>2.10.1</version>
		</dependency>
		<dependency>
			<groupId>net.jthink</groupId>
			<artifactId>jaudiotagger</artifactId>
			<version>2.2.6-PATHRIK</version>
		</dependency>
		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-forms</artifactId>
			<version>${jgoodies-forms-version}</version>
		</dependency>
		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-looks</artifactId>
			<version>${jgoodies-looks-version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.junrar</groupId>
			<artifactId>junrar</artifactId>
			<!--
				commons-logging:commons-logging is shared with
					- commons-configuration:commons-configuration
					- fm.last:coverartarchive-api

				Check the commons-logging:commons-logging version of the other libraries before upgrading
			-->
			<version>1.0.0</version>
		</dependency>

		<!-- XXX: not Mavenized: https://code.google.com/p/cuelib/ -->
		<dependency>
			<groupId>jwbroek.cuelib</groupId>
			<artifactId>cuelib</artifactId>
			<version>${cuelib-version}</version>
		</dependency>

		<dependency>
			<groupId>xmlwise</groupId>
			<artifactId>xmlwise</artifactId>
			<version>1.2.11</version>
		</dependency>
		<dependency>
			<groupId>sevenzip</groupId>
			<artifactId>jbinding</artifactId>
			<version>${sevenzip-version}</version>
		</dependency>
		<dependency>
			<groupId>sevenzip-allplatforms</groupId>
			<artifactId>jbinding-allplatforms</artifactId>
			<version>${sevenzip-version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.easytesting</groupId>
			<artifactId>fest-util</artifactId>
			<version>1.2.5</version>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<!-- Use 3.x for Java 8 -->
			<version>2.8.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
			<version>${jna-version}</version>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna-platform</artifactId>
			<version>${jna-version}</version>
		</dependency>
		<dependency>
			<groupId>org.fourthline.cling</groupId>
			<artifactId>cling-core</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.fourthline.cling</groupId>
			<artifactId>cling-support</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.seamless</groupId>
			<artifactId>seamless-http</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.seamless</groupId>
			<artifactId>seamless-util</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.seamless</groupId>
			<artifactId>seamless-xml</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>com.samskivert</groupId>
			<artifactId>jmustache</artifactId>
			<version>1.13</version>
		</dependency>
		<dependency>
			<groupId>su.litvak.chromecast</groupId>
			<artifactId>api-v2</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- fm.last:coverartarchive-api
					- com.github.oshi:oshi-core
					- com.rometools:rome

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading
			-->
			<version>0.10.1</version>
		</dependency>
		<dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>icu4j</artifactId>
			<version>59.1</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>annotations</artifactId>
			<version>3.0.1u2</version>
		</dependency>
		<dependency>
			<groupId>fm.last</groupId>
			<artifactId>coverartarchive-api</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- su.litvak.chromecast
					- com.github.oshi:oshi-core
					- com.rometools:rome

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading

				commons-logging:commons-logging is shared with
					- commons-configuration:commons-configuration
					- com.github.junrar:junrar

				Check the commons-logging:commons-logging version of the other libraries before upgrading

				commons-io:commons-io is shared with
					- net.pms:dms

				Check the commons-io:commons-io version before upgrading
			-->
			<version>2.1.0</version>
			<exclusions>
				<!-- This should never have been a dependency in the first place -->
				<exclusion>
					<groupId>com.google.code.findbugs</groupId>
					<artifactId>jsr305</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-io</groupId>
					<artifactId>commons-io</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.github.oshi</groupId>
			<artifactId>oshi-core</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- su.litvak.chromecast
					- fm.last:coverartarchive-api
					- com.rometools:rome

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading

				net.java.dev.jna:jna-platform is shared with
					- net.pms:dms

				Check the net.java.dev.jna:jna-platform version before upgrading
			-->
			<version>3.4.3</version>
		</dependency>
		<!--
		<dependency>
			<groupId>net.sourceforge.cobertura</groupId>
			<artifactId>cobertura</artifactId>
			<version>2.1.2</version>
			<scope>test</scope>
		</dependency>
		-->
	</dependencies>

	<build>
		<defaultGoal>prepare-package</defaultGoal>

		<!-- specify how files in src/main/resources are bundled in the target jar -->
		<resources>
			<!-- 1) package unfiltered resources -->

			<!--
				This needs to be defined explicitly if a <resources>...</resources>
				section is used
			-->
			<resource>
				<directory>src/main/resources</directory>
				<!--
					By default, Maven packages resources in the top-level of the jar e.g.

						/example.res

					The old DMS ant build packaged them in a "resources" directory
					e.g:

						/resources/example.res

					Currently, we preserve the old destination. If this is ever changed
					to the Maven default, a handful of files will need to be changed to
					reference "/example.res" rather than "/resources/example.res"
				-->
				<targetPath>resources</targetPath>
				<excludes>
					<exclude>project.properties</exclude>
				</excludes>

				<!-- Avoid inadvertently filtering binaries -->
				<filtering>false</filtering>
			</resource>

			<!-- 2) package filtered resources -->
			<resource>
				<directory>src/main/resources</directory>
				<targetPath>resources</targetPath>
				<includes>
					<include>project.properties</include>
				</includes>

				<!-- Filter to replace Maven properties -->
				<filtering>true</filtering>
			</resource>

			<!-- 3) package filtered NSIS header files -->
			<resource>
				<directory>src/main/external-resources/nsis</directory>
				<includes>
					<include>extra.nsh</include>
				</includes>

				<!-- Filter to replace Maven properties -->
				<filtering>true</filtering>
				<targetPath>..</targetPath>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<includes>
					<include>project.properties</include>
				</includes>
				<targetPath>resources</targetPath>

				<!-- Enable the use of Maven properties -->
				<filtering>true</filtering>
			</testResource>
			<!--*.srt files to test charset detection-->
			<testResource>
				<directory>src/test/resources/net/pms/util</directory>
				<includes>
					<include>*.srt</include>
				</includes>
				<targetPath>net/pms/util</targetPath>
			</testResource>
		</testResources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>

						<!--
							1) Force language because JUnit tests depend on English language strings

							2) Use our JNA dependency rather than the system's - fixes
							the following error on Linux (Ubuntu 12.04 with system
							jna-3.2.7.jar via libjna-java):

							There is an incompatible JNA native library installed on this system.
						-->
						<shutdown>kill</shutdown>
						<forkCount>1.5C</forkCount>
						<reuseForks>true</reuseForks>
						<!--
							Only one argLine element is processed.
							-XX:-UseSplitVerifier is a workaround for use Cobertura with Java 7
						-->
						<argLine>-Duser.language=en -Djna.nosys=true -XX:-UseSplitVerifier</argLine>
					</configuration>
					<version>${surefire-version}</version>
				</plugin>

				<!--
					This plugin's configuration is used to run Crowdin plugin from the command line,
					it has no influence on the Maven build itself.
				-->
				<plugin>
					<groupId>org.digitalmediaserver</groupId>
					<artifactId>crowdin-maven-plugin</artifactId>
					<version>0.4.1</version>
					<configuration>
						<project>${project}</project>
						<languageFilesFolder>${project.basedir}/src/main/resources/i18n</languageFilesFolder>
						<downloadFolder>${project.basedir}/extras/crowdin</downloadFolder>
						<statusFile>${project.basedir}/src/main/resources/languages.properties</statusFile>
						<crowdinServerId>crowdin-dms</crowdinServerId>
						<pushFileName>messages.properties</pushFileName>
						<pushFileTitle>Digital Media Server</pushFileTitle>
						<projectName>Digital Media Server</projectName>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!--
				Plugin to add git commit information properties.
				These are used in the project.properties files.
				See: https://github.com/ktoso/maven-git-commit-id-plugin
			-->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>${git-commit-id-plugin-version}</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dateFormat>yyyy-MM-dd</dateFormat>
					<verbose>false</verbose>
					<generateGitPropertiesFile>false</generateGitPropertiesFile>
					<failOnNoGitDirectory>false</failOnNoGitDirectory>
					<failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin-version}</version>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<testSource>1.7</testSource>
					<testTarget>1.7</testTarget>
					<compilerArgument>${compilerArgument}</compilerArgument>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.10</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
					<wtpversion>1.5</wtpversion>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-idea-plugin</artifactId>
				<version>2.2.1</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
					<dependenciesAsLibraries>true</dependenciesAsLibraries>
					<useFullNames>false</useFullNames>
				</configuration>
			</plugin>

			<!--
				This plugin will take care of installing the external dependencies that do not
				exist in a public Maven repository. That is why we store some jar files in the
				"src/main/external-resources/lib" directory and have this plugin take care of
				the installation at build time.

				Checksums can be calculated with "openssl sha1 [filename]".
			-->
			<plugin>
				<groupId>com.universalmediaserver</groupId>
				<artifactId>external-maven-plugin</artifactId>
				<version>0.2</version>
				<inherited>false</inherited>
				<configuration>
					<disableSSLValidation>true</disableSSLValidation>
					<stagingDirectory>${project.build.directory}/dependencies/</stagingDirectory>
					<createChecksum>true</createChecksum>
					<artifactItems>
						<artifactItem>
							<groupId>sevenzip</groupId>
							<artifactId>jbinding</artifactId>
							<version>${sevenzip-version}</version>
							<downloadUrl>http://www.spirton.com/uploads/7-Zip-JBinding/7-Zip-JBinding-{version}.{packaging}</downloadUrl>
						</artifactItem>
						<artifactItem>
							<groupId>sevenzip-allplatforms</groupId>
							<artifactId>jbinding-allplatforms</artifactId>
							<version>${sevenzip-version}</version>
							<downloadUrl>http://www.spirton.com/uploads/7-Zip-JBinding/7-Zip-JBinding-AllPlatforms-{version}.{packaging}</downloadUrl>
						</artifactItem>
						<artifactItem>
							<groupId>jwbroek.cuelib</groupId>
							<artifactId>cuelib</artifactId>
							<version>${cuelib-version}</version>
							<downloadUrl>http://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/cuelib/cuelib-${cuelib-version}.jar</downloadUrl>
-							<checksum>d03b6b960b3b83a2a419e8b5f07b6ba4bd18387b</checksum>
						</artifactItem>
					</artifactItems>
				</configuration>
				<executions>
					<execution>
						<id>clean-external-dependencies</id>
						<phase>clean</phase>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.6</version>
			</plugin>
		</plugins>
	</build>

	<!-- Set reports for the maven site plugin -->
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.9</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>index</report>
							<report>dependencies</report>
							<report>dependency-convergence</report>
							<report>dependency-management</report>
							<report>plugins</report>
						</reports>
					</reportSet>
		        </reportSets>
			</plugin>

			<!-- DMS tests report -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${surefire-version}</version>
				<configuration>
					<linkXRef>false</linkXRef>
					<showSuccess>false</showSuccess>
				</configuration>
			</plugin>

			<!-- Javadoc -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${maven-javadoc-plugin-version}</version>
				<configuration>
					<quiet>true</quiet>
					<tags>
						<tag>
							<name>todo</name>
							<placement>a</placement>
							<head>To Do:</head>
						</tag>
						<tag>
							<name>review</name>
							<placement>a</placement>
							<head>Review:</head>
						</tag>
					</tags>
					<!--
						Doclet to generate class diagrams inside Javadoc.
						Requires the installation of Graphviz (http://www.graphviz.org/)
					-->
					<doclet>org.jboss.apiviz.APIviz</doclet>
					<docletArtifact>
						<groupId>org.jboss.apiviz</groupId>
						<artifactId>apiviz</artifactId>
						<version>1.3.2.GA</version>
					</docletArtifact>
					<useStandardDocletOptions>true</useStandardDocletOptions>
				</configuration>
			</plugin>

			<!-- Class dependency report -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
				<version>2.0</version>
			</plugin>

			<!-- Findbugs report -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>3.0.5</version>
			</plugin>

			<!-- Checkstyle report -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<configLocation>CheckStyle.xml</configLocation>
					<linkXRef>false</linkXRef>
				</configuration>
			</plugin>

			<!-- Cobertura Test Coverage report -->
			<plugin>
				<groupId>com.qualinsight.mojo.cobertura</groupId>
				<artifactId>qualinsight-mojo-cobertura-core</artifactId>
				<version>2.0.0</version>
				<configuration>
					<formats>html</formats>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.9.0</version>
				<configuration>
					<analysisCache>true</analysisCache>
					<linkXRef>false</linkXRef>
					<sourceEncoding>utf-8</sourceEncoding>
					<targetJdk>1.7</targetJdk>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.github.jrh3k5</groupId>
				<artifactId>l10n-maven-plugin</artifactId>
				<version>1.4</version>
				<configuration>
					<failBuild>true</failBuild>
					<messagesFile>${project.basedir}/src/main/resources/i18n/messages.properties</messagesFile>
					<translatedMessagesPattern>src/main/resources/i18n/messages*.properties</translatedMessagesPattern>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<profiles>

		<!-- System's Makensis profile -->
		<profile>
			<!-- https://packages.debian.org/sid/nsis -->
			<id>system-makensis</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
			</activation>

			<properties>
				<!-- Use the system makensis on Linux or if selected for others OS -->
				<makensis-bin>makensis</makensis-bin>
			</properties>
		</profile>

		<!-- JAR profile -->
		<profile>
			<id>jar</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-shade-plugin</artifactId>
						<version>3.1.1</version>
						<configuration>
							<minimizeJar>true</minimizeJar>
							<keepDependenciesWithProvidedScope>false</keepDependenciesWithProvidedScope>
							<outputFile>${project.build.directory}/${project.artifactId}.jar</outputFile>
							<!-- non-included will be automatically excluded -->
							<filters>
								<filter>
									<artifact>commons-logging:commons-logging</artifact>
									<includes>
										<include>**</include>
									</includes>
								</filter>
								<filter>
									<artifact>com.twelvemonkeys.imageio:*</artifact>
									<includes>
										<include>**</include>
									</includes>
								</filter>
								<filter>
									<artifact>com.twelvemonkeys.common:common-lang</artifact>
									<includes>
										<include>**</include>
									</includes>
								</filter>
								<filter>
									<artifact>com.jgoodies:jgoodies-looks</artifact>
									<includes>
										<include>**</include>
									</includes>
								</filter>
								<filter>
									<artifact>org.fourthline.cling:cling-core</artifact>
									<includes>
										<include>**</include>
									</includes>
								</filter>
							</filters>
							<promoteTransitiveDependencies>true</promoteTransitiveDependencies>
							<artifactSet>
								<excludes>
									<exclude>com.google.code.findbugs:annotations</exclude>
								</excludes>
							</artifactSet>
						</configuration>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>shade</goal>
								</goals>
								<configuration>
									<transformers>
										<transformer
											implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
										<transformer
											implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
											<mainClass>net.pms.PMS</mainClass>
										</transformer>
									</transformers>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Windows EXE profile -->
		<profile>
			<id>exe</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>download-files-windows</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target name="Downloading binaries" unless="offline">
										<!-- Make sure the download folders exist (if "mvn -Doffline" is not used) -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/win32" />
										<mkdir dir="${project.binaries}/win32/avisynth" />
										<mkdir dir="${project.binaries}/win32/codecs" />
										<mkdir dir="${project.binaries}/win32/fonts" />
										<mkdir dir="${project.binaries}/win32/fonts/conf.avail" />
										<mkdir dir="${project.binaries}/win32/fonts/conf.d" />
										<mkdir dir="${project.binaries}/win32/interframe" />
										<mkdir dir="${project.binaries}/win32/mplayer" />
										<mkdir dir="${project.binaries}/win32/service" />
										<!-- Download binaries -->
										<get src="${project.binaries-base}/MediaInfo.dll?p=${binary-revision}" dest="${project.binaries}/win32/MediaInfo.dll"  usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo64.dll?p=${binary-revision}" dest="${project.binaries}/win32/MediaInfo64.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo-License.html?p=${binary-revision}" dest="${project.binaries}/win32/MediaInfo-License.html" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/LICENSE-dsnative.txt?p=${binary-revision}" dest="${project.binaries}/win32/LICENSE-dsnative.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/LICENSE-mplayer.txt?p=${binary-revision}" dest="${project.binaries}/win32/LICENSE-mplayer.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/builds.txt?p=${binary-revision}" dest="${project.binaries}/win32/builds.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dcrawMS.exe?p=${binary-revision}" dest="${project.binaries}/win32/dcrawMS.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/ffmpeg.exe?p=${binary-revision}" dest="${project.binaries}/win32/ffmpeg.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/ffmpeg64.exe?p=${binary-revision}" dest="${project.binaries}/win32/ffmpeg64.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/flac.exe?p=${binary-revision}" dest="${project.binaries}/win32/flac.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mencoder.exe?p=${binary-revision}" dest="${project.binaries}/win32/mencoder.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer.exe?p=${binary-revision}" dest="${project.binaries}/win32/mplayer.exe"  usetimestamp="true" />
										<get src="${project.binaries-base}/win32/tsMuxeR-new.exe?p=${binary-revision}" dest="${project.binaries}/win32/tsMuxeR.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/vcomp100.dll?p=${binary-revision}" dest="${project.binaries}/win32/vcomp100.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/avisynth/avisynth.exe?p=${binary-revision}" dest="${project.binaries}/win32/avisynth/avisynth.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv33260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drv33260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv43260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drv43260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drvc.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drvc.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/pncrt.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/pncrt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/sipr3260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/sipr3260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/tokr3260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/tokr3260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wma9dmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wma9dmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmv9dmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wmv9dmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmvdmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wmvdmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/fonts.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/fonts.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/10-scale-bitmap-fonts.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/10-scale-bitmap-fonts.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/20-unhint-small-vera.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/20-unhint-small-vera.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/30-metric-aliases.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/30-metric-aliases.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/30-urw-aliases.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/30-urw-aliases.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/40-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/40-nonlatin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/45-latin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/45-latin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/49-sansserif.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/49-sansserif.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/50-user.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/50-user.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/51-local.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/51-local.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/60-latin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/60-latin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/65-fonts-persian.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/65-fonts-persian.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/65-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/65-nonlatin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/69-unifont.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/69-unifont.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/80-delicious.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/80-delicious.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/90-synthetic.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/90-synthetic.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/README?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/README" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/InterFrame2.avsi?p=${binary-revision}" dest="${project.binaries}/win32/interframe/InterFrame2.avsi" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/svpflow1.dll?p=${binary-revision}" dest="${project.binaries}/win32/interframe/svpflow1.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/svpflow2.dll?p=${binary-revision}" dest="${project.binaries}/win32/interframe/svpflow2.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/config?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/config" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/input.conf?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/input.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/subfont.ttf?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/subfont.ttf" usetimestamp="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>nsis-maven-plugin</artifactId>
						<version>1.0-alpha-1</version>
						<executions>
							<execution>
								<id>build-dms-windows</id>
								<configuration>
									<makensisBin>${makensis-bin}</makensisBin>
									<outputFile>${project.name.short}.exe</outputFile>
									<scriptFile>src/main/external-resources/nsis/${project.artifactId}.nsi</scriptFile>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>generate-headerfile</goal>
									<goal>make</goal>
								</goals>
							</execution>
							<execution>
								<id>build-setup-windows</id>
								<configuration>
									<makensisBin>${makensis-bin}</makensisBin>
									<outputFile>${project.name.short}-setup.exe</outputFile>
									<scriptFile>src/main/external-resources/nsis/setup.nsi</scriptFile>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>make</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Linux TAR.GZ profile -->
		<profile>
			<id>tgz</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>download-files-linux</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/linux" />
										<!-- Download binaries -->
										<get src="${project.binaries-base}/linux/ffmpeg?p=${binary-revision}" dest="${project.binaries}/linux/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/ffmpeg64?p=${binary-revision}" dest="${project.binaries}/linux/ffmpeg64" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/tsMuxeR-new?p=${binary-revision}" dest="${project.binaries}/linux/tsMuxeR" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/tsMuxeR_licence.txt?p=${binary-revision}" dest="${project.binaries}/linux/tsMuxeR_license.txt" usetimestamp="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
							<!-- Assemble the DMS distribution file. -->
						<executions>
							<execution>
								<id>build-dms-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<finalName>${project.artifactId}-${project.version}</finalName>
									<appendAssemblyId>false</appendAssemblyId>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-linux.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<addClasspath>true</addClasspath>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Linux DEB profile -->
		<profile>
			<id>deb</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<jdk>[1.7,)</jdk>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>create-control-linux</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<!--
										Latest MediaInfo:
										deb http://ftp.de.debian.org/debian sid main
										Latest tsMuxeR:
										deb http://archive.getdeb.net/ubuntu xenial-getdeb apps
										Latest FFmpeg:
										deb http://ftp.de.debian.org/debian experimental main
										Latest VLC:
										deb http://ftp.de.debian.org/debian buster main
									-->
									<target>
										<mkdir dir="${project.build.directory}/control" />
										<chmod dir="${project.build.directory}/control" type="dir" perm="0755"/>
										<echo file="${project.build.directory}/control/control" force="true">Package: ${project.artifactId}${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Version: ${project.version}${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Section: java${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Priority: standard${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Architecture: all${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Depends: default-jre-headless (>= 1.7) | default-jre (>= 1.7) | java-runtime-headless (>= 1.7) | java-runtime (>= 1.7) | java-sdk (>= 1.7) | openjdk-7-jdk | openjdk-7-jre | openjdk-8-jdk | openjdk-8-jre |  openjdk-7-jre-headless | openjdk-8-jre-headless | oracle-java7-jdk | oracle-java8-jdk | oracle-java7-jre | oracle-java8-jre | java7-runtime | java8-runtime | java7-runtime-headless | java8-runtime-headless ${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Recommends: dcraw, ffmpeg, mediainfo, tsmuxer${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Suggests: mencoder, vlc (>= 3.0.0), ffmpeg (>= 4.0.0)${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Maintainer: Nadahar &lt;nadahar@dms.com&gt;${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Description: Media server${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Distribution: stable${line.separator}</echo>
										<echo file="${project.build.directory}/control/control" append="true">Homepage: http://www.digitalmediaserver.com/${line.separator}</echo>
										<chmod file="${project.build.directory}/control/control" perm="0644"/>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>jdeb</artifactId>
						<groupId>org.vafer</groupId>
						<!-- Above versions doesn't support Java 7 -->
						<version>1.5</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>jdeb</goal>
								</goals>
								<configuration>
									<deb>${project.build.directory}/${project.artifactId}-${project.version}.deb</deb>
									<verbose>false</verbose>
									<controlDir>${project.build.directory}/control</controlDir>
									<compression>xz</compression>
									<!--
										Control structure:
										https://debian-handbook.info/browse/stable/sect.package-meta-information.html
										https://www.debian.org/doc/debian-policy/#document-ch-controlfields
										Binaries dependencies:
										https://www.debian.org/doc/debian-policy/#s-binarydeps
									-->
									<controlInfo>
										<package>${project.artifactId}</package>
										<version>${project.version}</version>
										<section>java</section>
										<priority>standard</priority>
										<architecture>all</architecture>
										<depends>default-jre-headless (>= 1.7) | default-jre (>= 1.7) | java-runtime-headless (>= 1.7) | java-runtime (>= 1.7) | java-sdk (>= 1.7) | openjdk-7-jdk | openjdk-7-jre | openjdk-8-jdk | openjdk-8-jre |  openjdk-7-jre-headless | openjdk-8-jre-headless | oracle-java7-jdk | oracle-java8-jdk | oracle-java7-jre | oracle-java8-jre | java7-runtime | java8-runtime | java7-runtime-headless | java8-runtime-headless</depends>
										<recommends>dcraw, ffmpeg, mediainfo, tsmuxer</recommends>
										<suggests>mencoder, vlc (>= 3.0.0), ffmpeg (>= 4.0.0)</suggests>
										<description>Media server</description>
										<maintainer>Nadahar</maintainer>
										<distribution>stable</distribution>
										<maintainer>Nadahar &lt;nadahar@dms.com&gt;</maintainer>
									</controlInfo>
									<dataSet>
										<data>
											<src>${project.external-resources}/documentation</src>
											<type>directory</type>
											<missingSrc>ignore</missingSrc>
											<mapper>
												<type>perm</type>
												<prefix>/usr/lib/${project.artifactId}/documentation</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.external-resources}/plugins</src>
											<type>directory</type>
											<missingSrc>ignore</missingSrc>
											<mapper>
												<type>perm</type>
												<prefix>/usr/lib/${project.artifactId}/plugins</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.external-resources}/renderers</src>
											<type>directory</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/lib/${project.artifactId}/renderers</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.external-resources}/web</src>
											<type>directory</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/lib/${project.artifactId}/web</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.external-resources}</src>
											<type>directory</type>
											<includes>*.*</includes>
											<excludes>*.sh, *.bat, *.conf, *.webfilters</excludes>
											<mapper>
												<type>perm</type>
												<strip>1</strip>
												<prefix>/usr/lib/${project.artifactId}</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.external-resources}</src>
											<type>directory</type>
											<includes>*.conf, *.webfilters</includes>
											<conffile>true</conffile>
											<mapper>
												<type>perm</type>
												<strip>1</strip>
												<prefix>${project.skelprofile.dir}${project.name.camel}</prefix>
											</mapper>
										</data>
										<data>
											<src>${project.build.directory}/${project.artifactId}.jar</src>
											<dst>/usr/lib/${project.artifactId}/${project.artifactId}.jar</dst>
											<type>file</type>
										</data>
										<data>
											<src>${project.external-resources}/${project.artifactId}.sh</src>
											<dst>/usr/lib/${project.artifactId}/${project.artifactId}.sh</dst>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<filemode>755</filemode>
											</mapper>
										</data>
										<data>
											<linkName>/usr/bin/${project.artifactId}</linkName>
											<linkTarget>/usr/lib/${project.artifactId}/${project.artifactId}.sh</linkTarget>
											<symlink>true</symlink>
											<type>link</type>
										</data>
										<data>
											<linkName>/usr/bin/${project.name.short}</linkName>
											<linkTarget>/usr/lib/${project.artifactId}/${project.artifactId}.sh</linkTarget>
											<symlink>true</symlink>
											<type>link</type>
										</data>
									</dataSet>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Linux RPM profile -->
		<profile>
			<id>rpm</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<jdk>[1.8,)</jdk>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>de.dentrassi.maven</groupId>
						<artifactId>rpm</artifactId>
						<version>0.10.2</version>
						<executions>
							<execution>
								<goals>
									<goal>rpm</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<attach>false</attach>
							<group>Application/Internet</group>
							<license>GPLv2+</license>
							<skipSigning>true</skipSigning>
							<script>
								echo "HAVE FUN !"
							</script>
							<!--<outputFileName>${project.artifactId}-${project.version}.rpm</outputFileName>-->
							<leadOverrideArchitecture/>
							<leadOverrideOperatingSystem/>
							<!--http://rpm5.org/docs/api/dependencies.html-->
							<requires>
								<!--
									Boolean dependencies have only been introcuded since RPM 4.13
									http://rpm.org/user_doc/boolean_dependencies.html
									http://ftp.rpm.org/api/4.4.2.2/dependencies.html
									http://ftp.rpm.org/max-rpm/s1-rpm-depend-manual-dependencies.html
									https://github.com/puzzle/java-oracle-rpm/blob/master/java-1.7.0-oracle-devel.spec
									(jre &gt;= 1:1.7.0 or java &gt;= 1.8 or java-headless &gt;= 1:1.7.0)
								-->
								<require>java &gt;= 1.7</require>
								<require>dcraw</require>
								<require>ffmpeg</require>
								<require>mediainfo</require>
							</requires>
							<rulesets>
								<ruleset>
									<id>default-settings</id>
									<rules>
										<rule>
											<user>root</user>
											<group>root</group>
										</rule>
										<rule>
											<when>
												<type>directory</type>
											</when>
											<mode>0755</mode>
										</rule>
										<rule>
											<when>
												<type>file</type>
											</when>
											<mode>0644</mode>
										</rule>
										<rule>
											<when>
												<prefix>${project.skelprofile.dir}</prefix>
											</when>
											<configuration>true</configuration>
											<missingOk>true</missingOk>
											<noreplace>true</noreplace>
										</rule>
										<file>
											<when>
												<suffix>README.txt</suffix>
											</when>
											<readme>true</readme>
										</file>
									</rules>
								</ruleset>
							</rulesets>
							<entries>
								<entry>
									<name>/usr/local/lib/${project.artifactId}</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}/data</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/documentation</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/documentation</name>
									<collect>
										<from>${project.external-resources}/documentation</from>
										<directories>true</directories>
									</collect>
									<ruleset>default-settings</ruleset>
									<documentation>true</documentation>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/plugins</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/plugins</name>
									<collect>
										<from>${project.external-resources}/plugins</from>
										<directories>true</directories>
									</collect>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/renderers</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/renderers</name>
									<collect>
										<from>${project.external-resources}/renderers</from>
										<directories>false</directories>
									</collect>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/web</name>
									<directory>true</directory>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/web</name>
									<collect>
										<from>${project.external-resources}/web</from>
										<directories>true</directories>
									</collect>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/${project.artifactId}.sh</name>
									<file>${project.external-resources}/${project.artifactId}.sh</file>
									<ruleset>default-settings</ruleset>
									<mode>0755</mode>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/logback.xml</name>
									<file>${project.external-resources}/logback.xml</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/logback.headless.xml</name>
									<file>${project.external-resources}/logback.headless.xml</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/DummyInput.jpg</name>
									<file>${project.external-resources}/DummyInput.jpg</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/DummyInput.ass</name>
									<file>${project.external-resources}/DummyInput.ass</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/lib/${project.artifactId}/${project.artifactId}.jar</name>
									<file>${project.build.directory}/${project.artifactId}.jar</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}/WEB.conf</name>
									<file>${project.external-resources}/WEB.conf</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}/${project.name.short}.conf</name>
									<file>${project.external-resources}/${project.name.short}.conf</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}/VirtualFolders.conf</name>
									<file>${project.external-resources}/VirtualFolders.conf</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>${project.skelprofile.dir}${project.name.camel}/ffmpeg.webfilters</name>
									<file>${project.external-resources}/ffmpeg.webfilters</file>
									<ruleset>default-settings</ruleset>
								</entry>
								<entry>
									<name>/usr/local/bin/${project.artifactId}</name>
									<linkTo>/usr/local/lib/${project.artifactId}/${project.artifactId}.sh</linkTo>
								</entry>
								<entry>
									<name>/usr/local/bin/${project.name.short}</name>
									<linkTo>/usr/local/lib/${project.artifactId}/${project.artifactId}.sh</linkTo>
								</entry>
							</entries>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			Mac OSX profile: takes care of building the pre-final package for macOS.
			Note: This does not make the .dmg so you will have to do that manually.
			The open source dmgCreator can be used.
		-->
		<profile>
			<id>osx</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<!--
				<property>
					<name>release</name>
					<value>true</value>
				</property>
				-->
			</activation>
			<build>
				<plugins>
					<!--
						Plugin to download binaries before assembly
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>process-resources-osx-java</id>
								<phase>test</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/osx" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/osx/dcraw" dest="${project.binaries}/osx/dcraw" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/ffmpeg" dest="${project.binaries}/osx/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/flac" dest="${project.binaries}/osx/flac" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/libmediainfo.dylib" dest="${project.binaries}/osx/libmediainfo.dylib" usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo-License.html" dest="${project.binaries}/osx/MediaInfo-License.html" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/mencoder" dest="${project.binaries}/osx/mencoder" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/mplayer" dest="${project.binaries}/osx/mplayer" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/tsMuxeR-new" dest="${project.binaries}/osx/tsMuxeR" usetimestamp="true" />

										<!-- Make all downloaded binaries executable -->
										<chmod dir="${project.binaries}/osx" perm="a+x" includes="*" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>prepare-package-osx-java</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the target folder exists -->
										<mkdir dir="${project.build.directory}/${project.artifactId}-${project.version}" />
										<!-- Create the shortcut to the Applications folder -->
										<exec executable="/usr/bin/osascript">
											<arg value="-e" />
											<arg value="tell application &quot;Finder&quot;" />
											<arg value="-e" />
											<arg value="set src to POSIX file &quot;/Applications&quot;" />
											<arg value="-e" />
											<arg value="set dest to POSIX file &quot;${project.build.directory}/${project.artifactId}-${project.version}&quot;" />
											<arg value="-e" />
											<arg value="make new alias file to folder src at folder dest" />
											<arg value="-e" />
											<arg value="end tell" />
										</exec>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>package app</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask"
											classpath="${basedir}/src/main/external-resources/lib/appbundler-1.3.${project.name.short}.jar"/>
										<bundleapp  outputdirectory="${project.build.directory}/${project.artifactId}-${project.version}"
													name="${project.name}"
													displayname="${project.name}"
													executableName="${project.name.short}"
													identifier="net.pms.PMS"
													version="${project.version}"
													icon="${project.basedir}/src/main/resources/images/logo.icns"
													applicationCategory="public.app-category.entertainment"
													workingdirectory="$APP_ROOT/Contents/Resources"
													mainclassname="net.pms.PMS">
											<classpath file="${project.build.directory}/${project.artifactId}.jar"/>
											<option value="-Xmx768M"/>
											<option value="-Xss16M"/>
											<option value="-Dfile.encoding=UTF-8"/>
											<option value="-Djava.net.preferIPv4Stack=true"/>
											<option value="-Xdock:name=${project.name}"/>
										</bundleapp>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-osx-java</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
							<!--
								Assemble the DMS files in the right place before
								moving them to the app Bundle.
							-->
							<execution>
								<id>make-assembly-osx-java</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-osx_java7_8.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Builds checksums profile-->
		<profile>
			<id>checksum</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>release</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>net.nicoulaj.maven.plugins</groupId>
						<artifactId>checksum-maven-plugin</artifactId>
						<version>1.6</version>
						<!-- Rely on org.bouncycastle:bcprov-jdk15on dependancy -->
						<executions>
							<execution>
								<id>checksum-files</id>
								<phase>package</phase>
								<goals>
									<goal>files</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<quiet>true</quiet>
							<!-- Choose the prefered one -->
							<shasumSummary>true</shasumSummary>
							<xmlSummary>true</xmlSummary>
							<csvSummary>false</csvSummary>
							<failOnError>false</failOnError>
							<algorithms>
								<algorithm>SHA-256</algorithm>
								<!-- <algorithm>MD5</algorithm> -->
							</algorithms>
							<fileSets>
								<fileSet>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>${project.name.short}-setup.exe</include>
										<include>${project.artifactId}-${project.version}.tgz</include>
										<include>${project.artifactId}-${project.version}.deb</include>
										<include>${project.artifactId}-${project.version}.rpm</include>
									</includes>
								</fileSet>
							</fileSets>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			This profile allows running DMS from inside Eclipse
			(Requires a "mvn clean package" to download the binaries first)
		-->
		<profile>
			<id>eclipse</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
						<!--
							This plugin's configuration is used to store Eclipse m2e settings only.
							https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html
						-->
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>1.0.0</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-antrun-plugin</artifactId>
												<versionRange>[1.7.0-60,)</versionRange>
												<goals>
													<goal>run</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>pl.project13.maven</groupId>
												<artifactId>git-commit-id-plugin</artifactId>
												<versionRange>[${git-commit-id-plugin-version},)</versionRange>
												<goals>
													<goal>revision</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>com.universalmediaserver</groupId>
												<artifactId>external-maven-plugin</artifactId>
												<versionRange>[0.1,)</versionRange>
												<goals>
													<goal>clean</goal>
													<goal>resolve</goal>
													<goal>localinstall</goal>
													<goal>install</goal>
													<goal>deploy</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<execute></execute>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.digitalmediaserver</groupId>
												<artifactId>crowdin-maven-plugin</artifactId>
												<versionRange>[0.1,)</versionRange>
												<goals>
													<goal>fetch</goal>
													<goal>push</goal>
													<goal>build</goal>
													<goal>apply</goal>
													<goal>pull</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<execute></execute>
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
	</profiles>
</project>
